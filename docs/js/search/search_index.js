var COMPODOC_SEARCH_INDEX = {
  index: {
    version: "2.3.9",
    fields: ["title", "body"],
    fieldVectors: [
      ["title/modules/AppModule.html", [0, 0.749, 1, 2.16]],
      [
        "body/modules/AppModule.html",
        [
          0, 1.169, 1, 4.249, 2, 1.308, 3, 1.532, 4, 1.817, 5, 1.817, 6, 1.532,
          7, 2.451, 8, 1.817, 9, 2.831, 10, 2.831, 11, 3.506, 12, 0.03, 13,
          3.506, 14, 3.506, 15, 3.195, 16, 3.195, 17, 2.451, 18, 1.817, 19,
          1.532, 20, 0.366, 21, 0.325, 22, 0.325, 23, 3.373, 24, 2.978, 25,
          0.734, 26, 4.551, 27, 0.651, 28, 3.373, 29, 2.831, 30, 3.373, 31,
          3.373, 32, 4.551, 33, 2.831, 34, 2.831, 35, 2.474, 36, 3.373, 37,
          3.373, 38, 1.041, 39, 3.373, 40, 2.311, 41, 3.373, 42, 3.373, 43,
          3.373, 44, 2.831, 45, 0.366, 46, 0.015, 47, 0.02, 48, 0.02,
        ],
      ],
      ["title/controllers/AuthenticationController.html", [49, 2.16, 50, 2.16]],
      [
        "body/controllers/AuthenticationController.html",
        [
          12, 0.03, 20, 0.338, 21, 0.3, 22, 0.3, 25, 0.678, 27, 0.6, 35, 2.282,
          38, 1.645, 45, 0.338, 46, 0.014, 47, 0.019, 48, 0.019, 49, 2.818, 50,
          2.818, 51, 2.611, 52, 0.551, 53, 1.956, 54, 2.243, 55, 4.306, 56,
          3.111, 57, 2.789, 58, 1.304, 59, 3.111, 60, 2.546, 61, 3.111, 62,
          4.306, 63, 1.524, 64, 1.604, 65, 3.151, 66, 3.111, 67, 3.111, 68,
          0.706, 69, 3.111, 70, 3.614, 71, 3.614, 72, 4.245, 73, 3.614, 74,
          3.014, 75, 1.206, 76, 0.764, 77, 0.698, 78, 1.117, 79, 2.125, 80,
          2.818, 81, 2.125, 82, 3.614, 83, 3.614, 84, 3.614, 85, 1.546, 86,
          2.243, 87, 3.614, 88, 3.614, 89, 3.111, 90, 4.306, 91, 3.111, 92,
          2.611, 93, 1.676, 94, 4.306, 95, 4.306, 96, 4.306, 97, 3.111, 98,
          1.839, 99, 1.839, 100, 0.96, 101, 3.111, 102, 1.839, 103, 0.96, 104,
          1.536, 105, 3.111, 106, 3.111, 107, 2.282, 108, 3.111, 109, 1.304,
          110, 1.536, 111, 3.111,
        ],
      ],
      ["title/injectables/AuthenticationService.html", [74, 1.778, 112, 1.019]],
      [
        "body/injectables/AuthenticationService.html",
        [
          12, 0.03, 19, 1.188, 20, 0.175, 21, 0.155, 22, 0.155, 25, 0.507, 27,
          0.31, 38, 1.617, 45, 0.175, 46, 0.007, 47, 0.012, 48, 0.012, 52,
          0.285, 53, 1.188, 54, 1.501, 57, 1.903, 60, 0.951, 63, 0.497, 64,
          1.635, 65, 2.251, 68, 0.75, 70, 2.196, 71, 2.196, 72, 3.842, 73,
          4.138, 74, 1.409, 75, 1.014, 76, 1.028, 77, 0.424, 78, 0.939, 79,
          2.216, 80, 1.712, 81, 1.291, 82, 2.196, 83, 3.767, 84, 2.196, 85,
          0.939, 86, 1.501, 87, 2.196, 88, 3.196, 92, 1.35, 93, 0.867, 99,
          0.951, 100, 0.497, 103, 1.293, 104, 0.794, 109, 1.097, 110, 1.632,
          112, 0.807, 113, 0.794, 114, 1.35, 115, 0.749, 116, 2.068, 117, 1.729,
          118, 1.409, 119, 1.609, 120, 2.433, 121, 2.745, 122, 2.616, 123,
          2.616, 124, 1.609, 125, 2.616, 126, 2.616, 127, 2.792, 128, 2.196,
          129, 2.616, 130, 2.616, 131, 1.919, 132, 2.616, 133, 2.616, 134,
          3.516, 135, 3.079, 136, 1.712, 137, 3.096, 138, 3.767, 139, 2.616,
          140, 2.741, 141, 1.919, 142, 2.616, 143, 2.774, 144, 1.919, 145,
          2.616, 146, 1.291, 147, 1.612, 148, 2.792, 149, 2.792, 150, 3.306,
          151, 1.547, 152, 2.792, 153, 2.774, 154, 2.616, 155, 3.306, 156,
          2.424, 157, 2.616, 158, 2.616, 159, 2.616, 160, 2.616, 161, 2.616,
          162, 2.792, 163, 2.616, 164, 3.306, 165, 2.616, 166, 2.616, 167,
          2.616, 168, 2.616, 169, 2.616, 170, 2.196, 171, 3.767, 172, 2.616,
          173, 2.196, 174, 2.616, 175, 2.616, 176, 1.712, 177, 2.616, 178,
          4.189, 179, 2.616, 180, 2.616, 181, 1.919, 182, 2.616, 183, 2.822,
          184, 2.616, 185, 2.196, 186, 2.616, 187, 2.616, 188, 1.919, 189,
          2.196, 190, 1.547, 191, 2.196, 192, 2.616, 193, 3.306, 194, 3.306,
          195, 3.808, 196, 2.616, 197, 2.616, 198, 2.616, 199, 2.196, 200,
          2.616, 201, 2.616, 202, 2.616, 203, 3.306, 204, 2.616, 205, 2.424,
          206, 0.794, 207, 0.794, 208, 2.616, 209, 1.609, 210, 1.609, 211,
          1.053, 212, 1.18, 213, 1.609, 214, 1.409, 215, 1.18, 216, 1.609, 217,
          1.609, 218, 1.409, 219, 2.616, 220, 1.609, 221, 1.291, 222, 1.609,
          223, 0.951, 224, 2.616, 225, 1.609, 226, 1.609, 227, 1.35, 228, 1.35,
          229, 0.951, 230, 1.609, 231, 1.609, 232, 1.35, 233, 1.609, 234, 1.18,
        ],
      ],
      ["title/classes/BasePublicUserDto.html", [46, 0.015, 235, 2.16]],
      [
        "body/classes/BasePublicUserDto.html",
        [
          12, 0.029, 20, 0.372, 21, 0.331, 22, 0.331, 25, 0.629, 40, 1.929, 45,
          0.372, 46, 0.023, 47, 0.02, 48, 0.02, 52, 0.608, 58, 2.327, 68, 1.26,
          76, 1.275, 77, 0.967, 100, 1.058, 103, 1.986, 115, 1.317, 147, 1.865,
          235, 3.011, 236, 1.438, 237, 4.246, 238, 4.246, 239, 1.847, 240,
          2.177, 241, 2.186, 242, 1.993, 243, 3.862, 244, 3.429, 245, 1.929,
          246, 2.878, 247, 2.878, 248, 3.429, 249, 2.878, 250, 3.429, 251,
          2.244, 252, 5.789, 253, 2.244, 254, 3.375, 255, 3.809, 256, 3.375,
          257, 3.809, 258, 3.862, 259, 1.847, 260, 2.878,
        ],
      ],
      ["title/classes/BaseUserDto.html", [46, 0.015, 261, 2.16]],
      [
        "body/classes/BaseUserDto.html",
        [
          12, 0.03, 20, 0.351, 21, 0.312, 22, 0.312, 25, 0.687, 40, 2.112, 45,
          0.351, 46, 0.022, 47, 0.019, 48, 0.019, 52, 0.573, 58, 2.112, 63,
          1.365, 64, 1.172, 68, 1.144, 76, 1.237, 77, 0.95, 98, 1.911, 100,
          0.998, 115, 1.265, 147, 2.103, 211, 2.893, 212, 3.243, 236, 1.355,
          237, 3.973, 239, 1.741, 240, 1.853, 241, 2.153, 242, 1.588, 247,
          2.713, 251, 2.115, 253, 2.115, 255, 3.695, 257, 3.243, 258, 3.711,
          259, 1.741, 260, 2.713, 261, 2.893, 262, 3.712, 263, 3.711, 264,
          2.713, 265, 3.711, 266, 2.713, 267, 3.233, 268, 2.713, 269, 2.713,
          270, 2.614, 271, 3.243, 272, 3.544, 273, 2.713, 274, 3.233, 275,
          4.421, 276, 2.115, 277, 4.546, 278, 3.233, 279, 3.233, 280, 3.711,
          281, 4.421, 282, 2.115,
        ],
      ],
      ["title/classes/BcryptProvider.html", [46, 0.015, 283, 1.778]],
      [
        "body/classes/BcryptProvider.html",
        [
          12, 0.03, 20, 0.222, 21, 0.197, 22, 0.197, 25, 0.469, 27, 0.394, 38,
          1.344, 40, 1.622, 45, 0.222, 46, 0.009, 47, 0.014, 48, 0.014, 52,
          0.362, 53, 1.437, 54, 2.263, 63, 1.194, 68, 0.989, 75, 1.226, 76,
          0.777, 77, 0.513, 78, 1.136, 79, 3.122, 85, 1.692, 86, 2.503, 103,
          1.538, 104, 2.459, 109, 1.326, 110, 1.561, 115, 0.905, 116, 2.459,
          117, 1.978, 127, 2.838, 134, 1.716, 135, 1.704, 141, 2.838, 146,
          2.649, 153, 2.655, 156, 4.548, 162, 2.32, 173, 2.655, 183, 2.084, 190,
          2.575, 206, 1.561, 207, 1.561, 214, 2.084, 218, 1.101, 221, 1.561,
          223, 1.87, 229, 1.87, 236, 0.857, 242, 2.141, 282, 2.532, 283, 1.704,
          284, 1.716, 285, 3.656, 286, 4.323, 287, 4.128, 288, 3.163, 289,
          2.532, 290, 4.356, 291, 4.128, 292, 3.163, 293, 2.044, 294, 3.163,
          295, 2.044, 296, 3.163, 297, 2.655, 298, 3.163, 299, 2.655, 300,
          3.937, 301, 2.044, 302, 3.083, 303, 3.87, 304, 3.248, 305, 2.655, 306,
          2.044, 307, 2.07, 308, 2.655, 309, 2.044, 310, 2.325, 311, 1.716, 312,
          3.87, 313, 3.163, 314, 2.044, 315, 2.044, 316, 2.044, 317, 1.499, 318,
          1.338, 319, 2.044, 320, 3.163, 321, 3.163, 322, 3.163, 323, 2.044,
          324, 3.163, 325, 2.044, 326, 2.044, 327, 2.044,
        ],
      ],
      ["title/modules/ConfigurationModule.html", [0, 0.749, 11, 1.951]],
      [
        "body/modules/ConfigurationModule.html",
        [
          0, 1.198, 2, 1.643, 11, 3.12, 12, 0.03, 20, 0.46, 21, 0.409, 22,
          0.409, 24, 3.453, 25, 0.749, 27, 0.818, 45, 0.46, 46, 0.019, 47,
          0.023, 48, 0.023, 317, 3.108, 328, 4.238, 329, 5.278, 330, 4.429, 331,
          3.557, 332, 3.557, 333, 3.108, 334, 3.87, 335, 4.238, 336, 3.87, 337,
          4.238, 338, 3.557, 339, 4.238, 340, 4.238, 341, 3.557, 342, 4.238,
          343, 4.238, 344, 4.238,
        ],
      ],
      ["title/classes/CreateUserDto.html", [46, 0.015, 57, 1.499]],
      [
        "body/classes/CreateUserDto.html",
        [
          12, 0.029, 20, 0.297, 21, 0.264, 22, 0.264, 25, 0.558, 40, 1.149, 45,
          0.297, 46, 0.024, 47, 0.017, 48, 0.017, 52, 0.485, 57, 1.788, 58,
          2.112, 63, 1.555, 64, 1.222, 68, 1.143, 76, 0.966, 77, 0.817, 79,
          1.943, 80, 2.576, 81, 1.943, 93, 1.476, 98, 1.62, 103, 1.422, 115,
          1.127, 135, 3.212, 136, 2.576, 147, 1.655, 211, 3.832, 236, 1.149,
          239, 1.476, 241, 0.984, 242, 1.655, 245, 2.112, 259, 1.476, 261,
          3.832, 262, 3.015, 263, 3.867, 264, 2.299, 265, 2.299, 266, 2.299,
          268, 2.299, 269, 2.299, 270, 1.62, 271, 2.009, 272, 3.296, 273, 2.299,
          277, 3.304, 345, 3.304, 346, 3.304, 347, 3.694, 348, 3.937, 349,
          3.937, 350, 3.937, 351, 3.937, 352, 3.937, 353, 5.037, 354, 4.662,
          355, 5.037, 356, 5.037, 357, 4.228, 358, 5.037, 359, 5.037, 360,
          5.037, 361, 2.74, 362, 3.937, 363, 3.937, 364, 3.937, 365, 3.937, 366,
          3.304, 367, 4.608, 368, 2.74, 369, 3.867, 370, 2.74, 371, 2.74, 372,
          2.74, 373, 2.299, 374, 3.937, 375, 2.74,
        ],
      ],
      ["title/interfaces/HashAlgorithmInterface.html", [289, 2.16, 376, 2.16]],
      [
        "body/interfaces/HashAlgorithmInterface.html",
        [
          12, 0.029, 20, 0.435, 21, 0.386, 22, 0.386, 45, 0.435, 47, 0.022, 48,
          0.022, 52, 0.71, 53, 2.313, 68, 1.156, 75, 1.975, 76, 1.25, 77, 0.826,
          78, 1.829, 79, 2.514, 85, 1.829, 86, 2.677, 156, 4.462, 242, 2.364,
          286, 4.107, 289, 3.333, 291, 3.735, 299, 4.275, 300, 4.107, 305,
          4.275, 376, 2.621, 377, 4.006, 378, 4.7, 379, 3.362, 380, 4.006, 381,
          4.006,
        ],
      ],
      ["title/modules/IamModule.html", [0, 0.749, 13, 1.951]],
      [
        "body/modules/IamModule.html",
        [
          0, 1.248, 2, 1.495, 3, 1.751, 4, 2.077, 5, 2.077, 6, 1.751, 7, 2.963,
          8, 2.077, 12, 0.029, 13, 3.822, 16, 3.316, 17, 2.677, 18, 2.077, 19,
          1.751, 20, 0.418, 21, 0.372, 22, 0.372, 24, 3.252, 25, 0.728, 27,
          0.744, 29, 3.236, 35, 3.645, 45, 0.418, 46, 0.017, 47, 0.022, 48,
          0.022, 50, 3.599, 74, 3.316, 382, 3.236, 383, 3.236, 384, 3.236, 385,
          3.64, 386, 3.856, 387, 3.856, 388, 3.856, 389, 3.856,
        ],
      ],
      ["title/classes/IdDto.html", [46, 0.015, 390, 2.421]],
      [
        "body/classes/IdDto.html",
        [
          12, 0.029, 20, 0.492, 21, 0.437, 22, 0.437, 25, 0.549, 45, 0.492, 46,
          0.024, 47, 0.024, 48, 0.024, 52, 0.803, 58, 1.9, 68, 1.029, 77, 0.735,
          115, 1.574, 236, 1.9, 240, 2.482, 245, 2.306, 254, 4.034, 256, 4.034,
          259, 2.441, 390, 4.034, 391, 4.616, 392, 3.804, 393, 3.804, 394,
          4.533,
        ],
      ],
      ["title/classes/LoginUserDto.html", [46, 0.015, 395, 2.421]],
      [
        "body/classes/LoginUserDto.html",
        [
          12, 0.029, 20, 0.505, 21, 0.448, 22, 0.448, 25, 0.677, 45, 0.505, 46,
          0.02, 47, 0.025, 48, 0.025, 57, 2.113, 60, 2.75, 76, 1.371, 93, 2.505,
          98, 2.75, 236, 1.95, 239, 2.505, 262, 3.655, 347, 4.097, 395, 4.097,
          396, 3.904, 397, 5.587, 398, 4.652,
        ],
      ],
      ["title/modules/PasswordModule.html", [0, 0.749, 385, 1.951]],
      [
        "body/modules/PasswordModule.html",
        [
          0, 1.289, 2, 1.599, 3, 1.874, 4, 2.222, 5, 2.222, 6, 1.874, 7, 3.058,
          8, 3.058, 12, 0.029, 17, 2.795, 18, 2.222, 19, 1.874, 20, 0.448, 21,
          0.398, 22, 0.398, 25, 0.687, 27, 0.796, 45, 0.448, 46, 0.018, 47,
          0.023, 48, 0.023, 121, 3.56, 283, 2.795, 385, 3.76, 399, 3.462, 400,
          3.462, 401, 3.462, 402, 4.126, 403, 3.462, 404, 4.126,
        ],
      ],
      ["title/injectables/PasswordService.html", [112, 1.019, 121, 1.778]],
      [
        "body/injectables/PasswordService.html",
        [
          12, 0.03, 20, 0.303, 21, 0.269, 22, 0.269, 25, 0.484, 27, 0.539, 45,
          0.303, 46, 0.012, 47, 0.018, 48, 0.018, 52, 0.495, 53, 1.814, 54,
          2.54, 63, 1.233, 68, 1.058, 75, 1.807, 76, 1.144, 77, 0.756, 78,
          1.673, 85, 1.826, 86, 2.54, 102, 1.653, 103, 0.863, 104, 2.3, 109,
          1.674, 110, 1.971, 112, 1.233, 113, 1.38, 118, 1.506, 121, 2.151, 135,
          3.443, 146, 1.971, 162, 3.728, 190, 2.361, 242, 2.251, 283, 2.738,
          285, 3.352, 286, 3.728, 287, 2.929, 291, 3.728, 300, 4.458, 302,
          3.326, 307, 2.613, 311, 3.352, 403, 2.346, 405, 2.346, 406, 4.66, 407,
          3.994, 408, 2.795, 409, 2.795, 410, 3.994, 411, 2.795, 412, 5.377,
          413, 2.795, 414, 5.084, 415, 3.994, 416, 3.994, 417, 3.994, 418,
          3.994, 419, 3.994, 420, 2.795, 421, 3.994, 422, 3.994, 423, 2.346,
          424, 2.795, 425, 2.795,
        ],
      ],
      ["title/classes/PublicUserDTO.html", [46, 0.015, 426, 2.421]],
      [
        "body/classes/PublicUserDTO.html",
        [
          12, 0.029, 20, 0.422, 21, 0.375, 22, 0.375, 25, 0.471, 40, 1.632, 45,
          0.422, 46, 0.017, 47, 0.022, 48, 0.022, 52, 0.69, 58, 2.444, 68,
          1.323, 76, 1.228, 77, 0.946, 93, 2.096, 103, 1.962, 115, 1.431, 147,
          1.796, 235, 4.108, 236, 1.632, 238, 2.855, 239, 2.096, 240, 2.096,
          241, 1.984, 242, 1.796, 243, 4.197, 245, 1.632, 246, 3.267, 249,
          3.267, 347, 3.668, 369, 4.894, 373, 3.267, 426, 3.668, 427, 3.267,
          428, 3.892, 429, 3.892, 430, 3.892, 431, 3.892,
        ],
      ],
      [
        "title/injectables/SharedTransactionsService.html",
        [112, 1.019, 432, 1.778],
      ],
      [
        "body/injectables/SharedTransactionsService.html",
        [
          12, 0.03, 20, 0.201, 21, 0.179, 22, 0.179, 25, 0.5, 27, 0.358, 38,
          1.546, 45, 0.201, 46, 0.018, 47, 0.013, 48, 0.013, 52, 0.329, 53,
          1.332, 54, 2.487, 57, 1.332, 60, 1.096, 63, 0.572, 64, 1.548, 65,
          1.733, 68, 0.938, 75, 1.602, 76, 0.892, 77, 0.67, 78, 1.305, 85,
          1.483, 86, 2.359, 99, 1.096, 100, 1.87, 102, 1.096, 103, 1.275, 104,
          2.039, 109, 2.005, 110, 2.039, 112, 0.905, 113, 0.915, 115, 0.839,
          116, 1.794, 117, 1.876, 118, 0.999, 120, 1.447, 136, 1.918, 140,
          1.213, 143, 2.46, 146, 2.039, 147, 1.053, 148, 2.15, 149, 2.15, 151,
          2.828, 152, 2.666, 170, 1.557, 181, 2.15, 183, 2.225, 185, 1.557, 189,
          2.46, 190, 1.096, 191, 1.557, 205, 2.15, 206, 0.915, 207, 0.915, 214,
          1.958, 215, 1.36, 218, 1.579, 221, 1.794, 223, 1.733, 229, 1.733, 232,
          1.557, 240, 2.416, 241, 1.799, 245, 1.732, 251, 1.213, 272, 2.703,
          302, 2.703, 307, 2.703, 310, 0.915, 366, 1.557, 423, 1.557, 432,
          1.579, 433, 3.776, 434, 1.557, 435, 3.635, 436, 2.932, 437, 1.36, 438,
          3.508, 439, 2.932, 440, 1.855, 441, 4.204, 442, 4.499, 443, 4.131,
          444, 1.855, 445, 1.855, 446, 2.46, 447, 4.015, 448, 2.46, 449, 2.932,
          450, 2.46, 451, 2.932, 452, 2.932, 453, 4.487, 454, 2.932, 455, 1.855,
          456, 2.46, 457, 2.932, 458, 2.932, 459, 2.932, 460, 2.932, 461, 0.915,
          462, 1.557, 463, 1.36, 464, 2.46, 465, 2.46, 466, 1.855, 467, 1.855,
          468, 1.855, 469, 1.855, 470, 1.855, 471, 1.855, 472, 1.557, 473,
          1.855, 474, 1.557, 475, 2.932, 476, 1.855, 477, 1.36, 478, 1.557, 479,
          1.855, 480, 1.855, 481, 1.557, 482, 2.932, 483, 2.932, 484, 1.855,
        ],
      ],
      ["title/entities/Todo.html", [100, 1.019, 241, 1.185]],
      [
        "body/entities/Todo.html",
        [
          12, 0.03, 20, 0.322, 21, 0.286, 22, 0.286, 25, 0.583, 27, 0.573, 38,
          1.287, 45, 0.322, 46, 0.013, 47, 0.018, 48, 0.018, 52, 0.526, 58,
          2.391, 63, 1.487, 64, 1.611, 68, 1.33, 77, 0.925, 99, 1.755, 100,
          1.287, 103, 1.487, 107, 2.178, 115, 1.193, 116, 2.378, 117, 2.372,
          206, 1.466, 207, 1.466, 240, 2.391, 241, 1.875, 242, 1.875, 245,
          1.747, 280, 4.043, 461, 1.466, 485, 1.943, 486, 5.018, 487, 2.178,
          488, 4.817, 489, 4.817, 490, 5.223, 491, 4.817, 492, 2.969, 493,
          4.617, 494, 2.969, 495, 4.043, 496, 2.969, 497, 4.169, 498, 2.969,
          499, 2.969, 500, 4.817, 501, 2.969, 502, 2.969, 503, 4.169, 504,
          2.969, 505, 4.043, 506, 4.043, 507, 4.043, 508, 4.169, 509, 2.969,
          510, 2.969, 511, 2.969, 512, 4.043, 513, 2.969, 514, 2.969, 515,
          2.492,
        ],
      ],
      ["title/modules/TodoModule.html", [0, 0.749, 14, 1.951]],
      [
        "body/modules/TodoModule.html",
        [
          0, 1.309, 2, 1.904, 12, 0.028, 14, 3.41, 20, 0.533, 21, 0.473, 22,
          0.473, 25, 0.595, 27, 0.947, 45, 0.533, 46, 0.022, 47, 0.025, 48,
          0.025, 516, 4.91,
        ],
      ],
      [
        "title/injectables/TodoTransactionService.html",
        [112, 1.019, 517, 2.421],
      ],
      [
        "body/injectables/TodoTransactionService.html",
        [
          12, 0.029, 20, 0.485, 21, 0.431, 22, 0.431, 25, 0.66, 27, 0.862, 45,
          0.485, 46, 0.02, 47, 0.024, 48, 0.024, 68, 1.014, 75, 1.732, 76,
          1.097, 77, 0.725, 78, 1.604, 102, 2.641, 103, 1.379, 112, 1.682, 113,
          2.205, 118, 2.406, 437, 3.276, 438, 4.686, 461, 2.205, 517, 3.998,
          518, 4.575, 519, 3.276, 520, 4.467,
        ],
      ],
      ["title/modules/TransactionsModule.html", [0, 0.749, 15, 1.778]],
      [
        "body/modules/TransactionsModule.html",
        [
          0, 1.256, 2, 1.514, 3, 1.773, 4, 2.103, 5, 2.103, 6, 1.773, 7, 2.98,
          8, 2.98, 12, 0.029, 15, 3.49, 17, 2.699, 18, 2.103, 19, 1.773, 20,
          0.424, 21, 0.376, 22, 0.376, 25, 0.67, 27, 0.753, 45, 0.424, 46,
          0.017, 47, 0.022, 48, 0.022, 64, 1.035, 432, 3.533, 521, 3.277, 522,
          3.277, 523, 3.277, 524, 3.533, 525, 3.905, 526, 3.905, 527, 3.277,
          528, 3.277,
        ],
      ],
      ["title/entities/User.html", [64, 0.875, 100, 1.019]],
      [
        "body/entities/User.html",
        [
          12, 0.03, 20, 0.316, 21, 0.281, 22, 0.281, 25, 0.627, 27, 0.562, 38,
          1.471, 40, 1.724, 45, 0.316, 46, 0.013, 47, 0.018, 48, 0.018, 52,
          0.516, 58, 2.29, 64, 1.448, 65, 1.722, 68, 1.287, 76, 1.17, 77, 0.886,
          78, 1.477, 100, 1.269, 103, 1.471, 115, 1.177, 116, 2.353, 117, 2.352,
          135, 2.568, 147, 2.036, 206, 1.438, 207, 1.438, 240, 2.171, 241,
          2.092, 242, 1.86, 245, 1.999, 251, 1.906, 262, 3.119, 270, 1.722, 276,
          1.906, 461, 1.438, 472, 2.445, 485, 1.906, 487, 2.137, 493, 4.758,
          495, 4.001, 505, 4.001, 506, 4.001, 507, 4.001, 512, 2.445, 515,
          2.445, 529, 4.89, 530, 2.914, 531, 2.914, 532, 2.914, 533, 4.113, 534,
          3.452, 535, 2.914, 536, 2.914, 537, 2.914, 538, 2.914, 539, 4.113,
          540, 4.113, 541, 4.113, 542, 2.914, 543, 4.113, 544, 2.914, 545,
          4.767, 546, 4.113, 547, 2.914, 548, 2.914, 549, 2.914,
        ],
      ],
      ["title/injectables/UserService.html", [112, 1.019, 120, 1.629]],
      [
        "body/injectables/UserService.html",
        [
          12, 0.03, 20, 0.232, 21, 0.206, 22, 0.206, 25, 0.639, 27, 0.413, 38,
          1.484, 45, 0.232, 46, 0.009, 47, 0.014, 48, 0.014, 52, 0.379, 53,
          1.488, 54, 2.536, 57, 2.027, 63, 1.229, 64, 1.687, 65, 2.638, 68,
          1.013, 75, 1.73, 76, 1.095, 77, 0.724, 78, 1.602, 79, 1.617, 80,
          2.144, 81, 1.617, 85, 1.822, 86, 2.671, 93, 1.152, 100, 1.63, 103,
          1.011, 104, 1.965, 109, 1.669, 110, 1.617, 112, 1.011, 113, 1.056,
          116, 1.617, 118, 1.765, 120, 1.617, 127, 1.569, 136, 1.4, 141, 1.569,
          147, 2.138, 148, 1.569, 149, 1.569, 151, 2.999, 152, 1.569, 181,
          3.528, 183, 2.145, 205, 2.92, 214, 2.403, 215, 1.569, 218, 1.152, 221,
          1.617, 223, 1.265, 229, 1.265, 234, 1.569, 240, 2.214, 245, 1.87, 276,
          1.4, 302, 3.32, 307, 3.32, 310, 1.965, 346, 2.75, 432, 2.403, 446,
          2.75, 447, 2.75, 448, 2.75, 450, 2.75, 456, 3.745, 462, 1.796, 463,
          2.403, 524, 2.844, 527, 1.796, 528, 1.796, 550, 1.796, 551, 3.276,
          552, 3.276, 553, 3.276, 554, 2.139, 555, 2.139, 556, 3.276, 557,
          2.139, 558, 3.276, 559, 2.139, 560, 4.037, 561, 3.276, 562, 3.276,
          563, 2.139, 564, 3.982, 565, 2.139, 566, 1.796, 567, 2.139, 568,
          2.139, 569, 1.569, 570, 2.139, 571, 2.139, 572, 2.139, 573, 1.796,
          574, 1.796, 575, 3.276, 576, 1.796, 577, 2.139, 578, 2.139, 579,
          2.139,
        ],
      ],
      [
        "title/injectables/UserTransactionService.html",
        [112, 1.019, 524, 1.778],
      ],
      [
        "body/injectables/UserTransactionService.html",
        [
          12, 0.03, 20, 0.332, 21, 0.295, 22, 0.295, 25, 0.641, 27, 0.59, 38,
          1.51, 45, 0.332, 46, 0.013, 47, 0.019, 48, 0.019, 52, 0.542, 53,
          1.932, 54, 2.403, 64, 1.128, 68, 1.111, 75, 1.649, 76, 1.044, 77,
          0.69, 78, 1.528, 85, 1.098, 86, 1.932, 99, 1.807, 100, 1.313, 102,
          1.807, 103, 1.633, 109, 1.783, 110, 2.1, 112, 1.313, 113, 1.509, 115,
          1.217, 116, 2.415, 117, 2.403, 118, 1.647, 144, 2.242, 147, 2.248,
          176, 2, 183, 2.849, 206, 1.509, 207, 1.509, 221, 1.509, 223, 1.807,
          229, 1.807, 234, 2.242, 240, 1.282, 276, 2, 310, 2.1, 437, 2.242, 438,
          4.222, 441, 4.44, 453, 3.571, 461, 1.509, 463, 2.242, 464, 2.566, 465,
          2.566, 481, 2.566, 519, 2.242, 524, 2.291, 580, 4.44, 581, 4.893, 582,
          4.254, 583, 3.057, 584, 3.057, 585, 4.254, 586, 3.057, 587, 4.254,
          588, 3.057, 589, 3.057, 590, 3.057, 591, 3.057, 592, 3.057, 593,
          3.057, 594, 3.057, 595, 3.057, 596, 3.057,
        ],
      ],
      ["title/modules/UsersModule.html", [0, 0.749, 16, 1.778]],
      [
        "body/modules/UsersModule.html",
        [
          0, 1.247, 2, 1.49, 3, 1.746, 4, 2.07, 5, 2.07, 6, 1.746, 7, 2.958, 8,
          2.958, 12, 0.029, 15, 3.314, 16, 3.452, 17, 2.672, 18, 2.07, 19,
          1.746, 20, 0.417, 21, 0.371, 22, 0.371, 24, 3.246, 25, 0.728, 27,
          0.742, 34, 3.226, 45, 0.417, 46, 0.017, 47, 0.022, 48, 0.022, 64,
          1.019, 100, 1.186, 120, 3.231, 332, 3.226, 333, 2.819, 566, 3.226,
          597, 3.226, 598, 3.844, 599, 3.226, 600, 3.226, 601, 3.844, 602,
          3.844, 603, 3.844,
        ],
      ],
      ["title/classes/ValidateEnvironment.html", [46, 0.015, 604, 2.16]],
      [
        "body/classes/ValidateEnvironment.html",
        [
          12, 0.03, 20, 0.205, 21, 0.182, 22, 0.182, 25, 0.446, 27, 0.365, 38,
          0.919, 40, 0.793, 44, 1.587, 45, 0.323, 46, 0.021, 47, 0.013, 48,
          0.013, 52, 0.335, 58, 2.53, 63, 0.584, 68, 1.37, 77, 0.979, 81, 2.061,
          85, 1.069, 104, 0.934, 107, 1.387, 109, 0.793, 115, 0.852, 117, 1.352,
          137, 1.948, 140, 2.409, 146, 0.934, 151, 1.118, 188, 1.387, 199, 3.09,
          214, 1.019, 218, 1.983, 221, 0.934, 236, 0.793, 242, 2.29, 245, 2.022,
          253, 1.238, 254, 3.063, 255, 4.346, 256, 3.063, 257, 4.346, 259,
          1.019, 282, 1.238, 283, 1.019, 310, 1.817, 317, 1.387, 318, 2.409,
          338, 3.09, 393, 3.09, 477, 1.387, 478, 1.587, 604, 2.409, 605, 4.46,
          606, 1.387, 607, 2.977, 608, 2.184, 609, 2.977, 610, 3.09, 611, 3.09,
          612, 2.7, 613, 3.09, 614, 2.977, 615, 3.682, 616, 3.09, 617, 3.682,
          618, 3.682, 619, 3.682, 620, 3.682, 621, 3.682, 622, 3.682, 623,
          3.682, 624, 3.682, 625, 3.682, 626, 3.682, 627, 3.682, 628, 3.682,
          629, 3.682, 630, 3.682, 631, 3.682, 632, 1.891, 633, 5.863, 634,
          1.891, 635, 1.891, 636, 1.891, 637, 1.891, 638, 1.891, 639, 1.891,
          640, 1.891, 641, 1.891, 642, 1.891, 643, 1.891, 644, 1.891, 645,
          1.891, 646, 1.891, 647, 1.891, 648, 1.891, 649, 1.891, 650, 1.891,
          651, 1.891, 652, 1.587, 653, 1.891, 654, 1.587, 655, 3.063, 656,
          1.387, 657, 1.587, 658, 4.048, 659, 2.184, 660, 1.587, 661, 1.587,
          662, 1.891, 663, 1.891, 664, 1.891, 665, 1.891, 666, 1.891, 667,
          1.587, 668, 1.891, 669, 1.891, 670, 1.891, 671, 1.891,
        ],
      ],
      ["title/coverage.html", [672, 3.289]],
      [
        "body/coverage.html",
        [
          0, 0.666, 6, 1.333, 12, 0.029, 22, 0.283, 38, 0.906, 46, 0.026, 47,
          0.018, 48, 0.018, 49, 1.92, 50, 1.92, 51, 2.463, 57, 1.333, 64, 0.778,
          74, 1.58, 77, 0.476, 100, 1.276, 112, 1.754, 114, 2.463, 120, 1.448,
          121, 1.58, 235, 1.92, 237, 3.032, 238, 2.152, 239, 2.95, 241, 1.054,
          261, 1.92, 283, 1.58, 284, 2.463, 289, 1.92, 334, 2.152, 336, 2.152,
          345, 2.463, 376, 1.92, 378, 2.463, 379, 2.463, 390, 2.152, 391, 2.463,
          392, 2.463, 395, 2.152, 396, 2.463, 405, 2.463, 426, 2.152, 427,
          2.463, 432, 1.58, 433, 2.463, 434, 2.463, 486, 2.463, 487, 3.032, 517,
          2.152, 518, 2.463, 519, 3.032, 524, 1.58, 529, 2.463, 534, 2.463, 550,
          2.463, 569, 2.152, 580, 2.463, 604, 1.92, 605, 3.032, 606, 3.032, 660,
          4.017, 667, 5.304, 672, 2.152, 673, 2.152, 674, 2.934, 675, 2.934,
          676, 4.134, 677, 2.463, 678, 5.682, 679, 5.682, 680, 4.361, 681,
          5.682, 682, 2.463, 683, 2.463, 684, 2.463, 685, 2.934, 686, 2.934,
          687, 2.463, 688, 2.463, 689, 5.682, 690, 4.134, 691, 2.934, 692,
          2.934, 693, 2.934, 694, 2.934, 695, 2.934, 696, 2.934, 697, 2.934,
          698, 3.032, 699, 2.934, 700, 2.934, 701, 4.134, 702, 4.134, 703,
          2.934, 704, 2.934, 705, 2.934, 706, 2.934, 707, 2.934,
        ],
      ],
      ["title/dependencies.html", [3, 1.801, 708, 2.322]],
      [
        "body/dependencies.html",
        [
          3, 1.719, 12, 0.03, 27, 0.73, 33, 3.177, 46, 0.022, 47, 0.022, 48,
          0.022, 98, 2.238, 253, 2.477, 259, 2.039, 287, 2.776, 331, 3.177, 333,
          2.776, 461, 1.868, 612, 2.776, 613, 3.177, 709, 3.785, 710, 3.785,
          711, 5.452, 712, 3.785, 713, 3.785, 714, 4.122, 715, 3.785, 716,
          3.785, 717, 3.785, 718, 3.785, 719, 3.785, 720, 3.785, 721, 3.785,
          722, 3.785, 723, 3.785, 724, 3.785, 725, 6.127, 726, 5.452, 727,
          3.785, 728, 3.785, 729, 3.785, 730, 3.785, 731, 3.785, 732, 4.912,
          733, 3.177, 734, 3.785, 735, 3.785, 736, 3.785, 737, 3.785, 738,
          3.785, 739, 3.785, 740, 3.785, 741, 3.785, 742, 3.785, 743, 3.785,
          744, 3.785, 745, 3.785, 746, 3.785, 747, 3.785, 748, 3.785, 749,
          3.785, 750, 3.785,
        ],
      ],
      ["title/miscellaneous/functions.html", [751, 1.49, 752, 3.327]],
      [
        "body/miscellaneous/functions.html",
        [
          6, 2.536, 12, 0.027, 46, 0.018, 47, 0.022, 48, 0.022, 52, 0.705, 63,
          1.565, 75, 1.967, 76, 1.245, 77, 0.823, 78, 1.821, 81, 2.756, 85,
          1.821, 140, 3.319, 146, 1.964, 147, 2.181, 151, 2.353, 188, 2.919,
          214, 2.144, 242, 1.821, 310, 1.964, 318, 2.604, 336, 3.72, 341, 3.34,
          477, 3.72, 560, 4.686, 569, 3.72, 573, 3.34, 576, 3.34, 604, 2.604,
          605, 2.919, 606, 3.72, 654, 4.257, 655, 4.095, 656, 2.919, 657, 3.34,
          658, 4.686, 659, 2.919, 661, 3.34, 677, 3.34, 698, 2.919, 751, 2.144,
          752, 3.34, 753, 3.34, 754, 3.98, 755, 3.98, 756, 3.98, 757, 3.98,
        ],
      ],
      ["title/index.html", [52, 0.49, 758, 2.322, 759, 2.322]],
      [
        "body/index.html",
        [
          12, 0.028, 21, 0.274, 38, 0.877, 47, 0.018, 48, 0.018, 60, 1.679, 63,
          0.877, 64, 1.534, 72, 2.083, 79, 1.994, 131, 2.963, 137, 2.643, 138,
          3.39, 171, 3.39, 176, 2.643, 183, 2.176, 227, 2.384, 228, 2.384, 241,
          1.02, 270, 3.419, 272, 3.076, 297, 2.384, 318, 1.858, 357, 2.384, 672,
          2.083, 733, 4.718, 760, 5.121, 761, 2.384, 762, 2.84, 763, 2.84, 764,
          2.84, 765, 2.84, 766, 2.84, 767, 2.84, 768, 2.84, 769, 2.84, 770,
          2.84, 771, 4.123, 772, 4.04, 773, 3.39, 774, 3.946, 775, 3.39, 776,
          2.384, 777, 2.84, 778, 2.84, 779, 2.84, 780, 6.1, 781, 5.121, 782,
          2.84, 783, 4.04, 784, 2.84, 785, 4.04, 786, 4.701, 787, 2.84, 788,
          2.84, 789, 2.84, 790, 2.84, 791, 2.84, 792, 2.84, 793, 2.84, 794,
          2.84, 795, 2.84, 796, 4.04, 797, 2.84, 798, 4.04, 799, 4.04, 800,
          4.04, 801, 2.84, 802, 2.384, 803, 2.84, 804, 2.84, 805, 2.84, 806,
          2.84, 807, 2.84, 808, 2.84, 809, 2.84, 810, 2.84, 811, 2.84, 812,
          2.84, 813, 2.84, 814, 2.84, 815, 2.083, 816, 2.84, 817, 5.784, 818,
          2.84, 819, 2.84, 820, 2.84, 821, 2.84, 822, 4.04, 823, 2.84, 824,
          2.84, 825, 2.84, 826, 4.04, 827, 2.84, 828, 2.84, 829, 2.84, 830,
          4.04, 831, 2.643, 832, 4.04, 833, 2.84, 834, 2.84, 835, 2.84, 836,
          2.84, 837, 2.384, 838, 2.84, 839, 2.84, 840, 2.84, 841, 2.84, 842,
          2.84, 843, 2.84, 844, 2.84, 845, 2.84, 846, 2.84, 847, 2.84, 848,
          2.384, 849, 2.083, 850, 2.083, 851, 2.84, 852, 2.84, 853, 1.858,
        ],
      ],
      ["title/license.html", [758, 2.322, 759, 2.322, 853, 1.81]],
      [
        "body/license.html",
        [
          12, 0.022, 19, 1.709, 47, 0.022, 48, 0.022, 128, 4.106, 146, 1.857,
          176, 3.201, 271, 2.759, 304, 3.158, 673, 2.759, 714, 3.158, 802,
          3.158, 831, 2.462, 849, 2.759, 850, 2.759, 853, 2.462, 854, 5.436,
          855, 3.762, 856, 3.762, 857, 4.892, 858, 3.762, 859, 3.762, 860,
          3.762, 861, 3.762, 862, 3.762, 863, 3.762, 864, 4.892, 865, 6.383,
          866, 3.762, 867, 3.762, 868, 5.436, 869, 3.762, 870, 3.762, 871,
          3.762, 872, 3.762, 873, 3.762, 874, 3.762, 875, 3.762, 876, 3.762,
          877, 3.762, 878, 3.762, 879, 4.892, 880, 3.762, 881, 3.762, 882,
          3.762, 883, 3.762, 884, 3.762, 885, 3.762, 886, 4.892, 887, 4.892,
          888, 3.762, 889, 3.762, 890, 3.762, 891, 3.762, 892, 3.762, 893,
          3.762, 894, 3.762, 895, 3.762, 896, 3.762, 897, 3.762, 898, 3.762,
          899, 3.762, 900, 3.762, 901, 3.762, 902, 3.762, 903, 3.762, 904,
          3.762, 905, 3.762, 906, 3.762, 907, 3.762, 908, 3.762, 909, 3.762,
          910, 3.762, 911, 3.762, 912, 3.762, 913, 3.762, 914, 3.762,
        ],
      ],
      ["title/modules.html", [2, 1.739]],
      [
        "body/modules.html",
        [
          1, 2.999, 2, 1.777, 11, 2.709, 12, 0.024, 13, 2.709, 14, 2.709, 15,
          2.468, 16, 2.468, 47, 0.024, 48, 0.024, 385, 2.709, 837, 5.31, 915,
          6.327, 916, 6.327, 917, 6.503, 918, 5.537, 919, 5.537,
        ],
      ],
      ["title/overview.html", [815, 3.289]],
      [
        "body/overview.html",
        [
          0, 0.751, 1, 4.187, 2, 1.283, 3, 1.504, 4, 1.783, 5, 1.783, 6, 1.504,
          7, 1.783, 8, 1.783, 9, 2.778, 10, 2.778, 11, 3.016, 12, 0.029, 13,
          3.679, 14, 3.016, 15, 3.389, 16, 3.352, 17, 2.42, 18, 1.783, 19,
          1.504, 47, 0.02, 48, 0.02, 49, 2.166, 74, 2.747, 113, 1.634, 120,
          2.978, 121, 3.25, 211, 2.94, 212, 2.428, 236, 1.388, 354, 2.778, 376,
          2.166, 382, 2.778, 383, 2.778, 384, 2.778, 385, 3.487, 399, 2.778,
          400, 2.778, 401, 2.778, 432, 3.25, 485, 2.166, 521, 2.778, 522, 2.778,
          523, 2.778, 524, 3.25, 597, 2.778, 599, 2.778, 600, 2.778, 815, 2.428,
          920, 3.31, 921, 3.31,
        ],
      ],
      ["title/properties.html", [115, 1.134, 708, 2.322]],
      [
        "body/properties.html",
        [
          12, 0.029, 47, 0.025, 48, 0.025, 63, 1.48, 115, 1.372, 131, 3.517,
          270, 2.835, 771, 3.517, 773, 4.025, 774, 4.025, 775, 4.025, 776,
          4.025, 831, 3.138, 848, 4.025, 849, 3.517, 850, 3.517, 853, 3.138,
          922, 4.796, 923, 4.796, 924, 4.796,
        ],
      ],
      ["title/miscellaneous/typealiases.html", [751, 1.49, 925, 3.964]],
      [
        "body/miscellaneous/typealiases.html",
        [
          12, 0.026, 47, 0.026, 48, 0.026, 52, 0.898, 77, 0.822, 147, 2.111,
          751, 2.731, 926, 5.07, 927, 5.07, 928, 5.07,
        ],
      ],
      ["title/miscellaneous/variables.html", [608, 2.907, 751, 1.49]],
      [
        "body/miscellaneous/variables.html",
        [
          0, 1, 12, 0.03, 38, 1.36, 40, 1.847, 47, 0.016, 48, 0.016, 52, 0.449,
          54, 1.15, 64, 0.986, 77, 0.787, 81, 1.25, 85, 0.909, 109, 1.847, 117,
          1.15, 135, 2.373, 137, 3.655, 144, 1.857, 190, 1.497, 206, 2.552, 207,
          2.552, 218, 1.364, 221, 1.25, 241, 1.335, 282, 1.657, 308, 2.126, 310,
          1.25, 330, 4.809, 334, 2.727, 461, 2.175, 474, 4.075, 485, 2.433, 574,
          2.126, 608, 1.857, 610, 3.121, 611, 3.121, 612, 3.231, 616, 3.121,
          652, 3.698, 655, 3.792, 656, 1.857, 659, 3.561, 673, 2.727, 680,
          2.126, 682, 3.121, 683, 3.121, 684, 3.121, 687, 2.126, 688, 3.121,
          698, 1.857, 751, 1.364, 753, 2.126, 761, 2.126, 771, 2.727, 831,
          1.657, 929, 4.855, 930, 2.533, 931, 4.406, 932, 4.855, 933, 2.533,
          934, 4.406, 935, 2.533, 936, 2.533, 937, 4.406, 938, 2.533, 939,
          2.533, 940, 2.533, 941, 3.718, 942, 3.718, 943, 3.718, 944, 2.533,
          945, 4.406, 946, 2.533, 947, 2.533, 948, 2.533, 949, 2.533, 950,
          2.533, 951, 2.533, 952, 3.718, 953, 3.718, 954, 2.533, 955, 2.533,
          956, 2.533, 957, 3.718, 958, 2.533, 959, 2.533, 960, 2.533, 961,
          2.533, 962, 2.533, 963, 2.533, 964, 2.533, 965, 2.533, 966, 2.533,
          967, 2.533, 968, 4.406, 969, 4.406, 970, 4.406, 971, 2.533, 972,
          2.533, 973, 2.533, 974, 2.533, 975, 2.533, 976, 4.406, 977, 2.533,
          978, 2.533, 979, 2.533, 980, 2.533, 981, 2.533, 982, 2.533, 983,
          2.533, 984, 2.533, 985, 2.533, 986, 2.533, 987, 2.533, 988, 2.533,
          989, 2.533,
        ],
      ],
    ],
    invertedIndex: [
      [
        "",
        {
          _index: 12,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "0",
        {
          _index: 667,
          title: {},
          body: { "classes/ValidateEnvironment.html": {}, "coverage.html": {} },
        },
      ],
      ["0.0.1", { _index: 923, title: {}, body: { "properties.html": {} } }],
      ["0.14.1", { _index: 719, title: {}, body: { "dependencies.html": {} } }],
      ["0.2.0", { _index: 732, title: {}, body: { "dependencies.html": {} } }],
      ["0.3.20", { _index: 743, title: {}, body: { "dependencies.html": {} } }],
      ["0.5.1", { _index: 718, title: {}, body: { "dependencies.html": {} } }],
      ["0/1", { _index: 689, title: {}, body: { "coverage.html": {} } }],
      ["0/2", { _index: 676, title: {}, body: { "coverage.html": {} } }],
      ["0/3", { _index: 696, title: {}, body: { "coverage.html": {} } }],
      ["0/4", { _index: 701, title: {}, body: { "coverage.html": {} } }],
      ["0/5", { _index: 702, title: {}, body: { "coverage.html": {} } }],
      [
        "1",
        {
          _index: 211,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "1.0",
        {
          _index: 984,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["1.1.25", { _index: 710, title: {}, body: { "dependencies.html": {} } }],
      [
        "1.200.3",
        { _index: 738, title: {}, body: { "dependencies.html": {} } },
      ],
      ["1/1", { _index: 679, title: {}, body: { "coverage.html": {} } }],
      ["1/18", { _index: 686, title: {}, body: { "coverage.html": {} } }],
      ["1/2", { _index: 691, title: {}, body: { "coverage.html": {} } }],
      ["1/4", { _index: 693, title: {}, body: { "coverage.html": {} } }],
      ["1/5", { _index: 704, title: {}, body: { "coverage.html": {} } }],
      ["10.0.0", { _index: 711, title: {}, body: { "dependencies.html": {} } }],
      ["10.0.2", { _index: 716, title: {}, body: { "dependencies.html": {} } }],
      ["100", { _index: 678, title: {}, body: { "coverage.html": {} } }],
      ["16.4.5", { _index: 721, title: {}, body: { "dependencies.html": {} } }],
      [
        "2",
        {
          _index: 212,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BaseUserDto.html": {},
            "overview.html": {},
          },
        },
      ],
      ["2/4", { _index: 697, title: {}, body: { "coverage.html": {} } }],
      ["2/5", { _index: 700, title: {}, body: { "coverage.html": {} } }],
      ["20", { _index: 703, title: {}, body: { "coverage.html": {} } }],
      [
        "200",
        {
          _index: 62,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      ["2024", { _index: 856, title: {}, body: { "license.html": {} } }],
      [
        "23505",
        {
          _index: 475,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      ["25", { _index: 692, title: {}, body: { "coverage.html": {} } }],
      [
        "3",
        {
          _index: 213,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["3.0.0", { _index: 750, title: {}, body: { "dependencies.html": {} } }],
      ["3.2.3", { _index: 712, title: {}, body: { "dependencies.html": {} } }],
      ["3/5", { _index: 706, title: {}, body: { "coverage.html": {} } }],
      ["37.6.1", { _index: 744, title: {}, body: { "dependencies.html": {} } }],
      ["4/5", { _index: 695, title: {}, body: { "coverage.html": {} } }],
      ["40", { _index: 699, title: {}, body: { "coverage.html": {} } }],
      ["5", { _index: 685, title: {}, body: { "coverage.html": {} } }],
      ["5.0.1", { _index: 740, title: {}, body: { "dependencies.html": {} } }],
      ["5.1.1", { _index: 717, title: {}, body: { "dependencies.html": {} } }],
      ["5.1.4", { _index: 747, title: {}, body: { "dependencies.html": {} } }],
      ["5.3.10", { _index: 742, title: {}, body: { "dependencies.html": {} } }],
      ["5.95.0", { _index: 745, title: {}, body: { "dependencies.html": {} } }],
      ["50", { _index: 690, title: {}, body: { "coverage.html": {} } }],
      ["6", { _index: 921, title: {}, body: { "overview.html": {} } }],
      ["60", { _index: 705, title: {}, body: { "coverage.html": {} } }],
      ["7", { _index: 920, title: {}, body: { "overview.html": {} } }],
      ["7.4.2", { _index: 715, title: {}, body: { "dependencies.html": {} } }],
      ["7.8.1", { _index: 736, title: {}, body: { "dependencies.html": {} } }],
      [
        "8",
        {
          _index: 354,
          title: {},
          body: { "classes/CreateUserDto.html": {}, "overview.html": {} },
        },
      ],
      ["8.13.0", { _index: 729, title: {}, body: { "dependencies.html": {} } }],
      ["80", { _index: 694, title: {}, body: { "coverage.html": {} } }],
      ["9.0.2", { _index: 727, title: {}, body: { "dependencies.html": {} } }],
      ["above", { _index: 885, title: {}, body: { "license.html": {} } }],
      ["access", { _index: 809, title: {}, body: { "index.html": {} } }],
      [
        "accordingly",
        {
          _index: 961,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["action", { _index: 909, title: {}, body: { "license.html": {} } }],
      [
        "adding",
        {
          _index: 448,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "address",
        {
          _index: 560,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "addserver(process.env.swagger_add_svr",
        {
          _index: 985,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "adjust",
        {
          _index: 959,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "afterinsert",
        {
          _index: 505,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "afterremove",
        {
          _index: 506,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "afterupdate",
        {
          _index: 507,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "against",
        {
          _index: 311,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "algorithm",
        {
          _index: 422,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "algorithm.interface",
        { _index: 309, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "algorithm.interface.ts",
        {
          _index: 379,
          title: {},
          body: {
            "interfaces/HashAlgorithmInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "algorithm.interface.ts:2",
        {
          _index: 381,
          title: {},
          body: { "interfaces/HashAlgorithmInterface.html": {} },
        },
      ],
      [
        "algorithm.interface.ts:3",
        {
          _index: 380,
          title: {},
          body: { "interfaces/HashAlgorithmInterface.html": {} },
        },
      ],
      [
        "aliases",
        {
          _index: 926,
          title: {},
          body: { "miscellaneous/typealiases.html": {} },
        },
      ],
      [
        "allow",
        {
          _index: 775,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      [
        "along",
        {
          _index: 166,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "already",
        {
          _index: 148,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["amazing", { _index: 838, title: {}, body: { "index.html": {} } }],
      ["and/or", { _index: 877, title: {}, body: { "license.html": {} } }],
      [
        "api",
        {
          _index: 771,
          title: {},
          body: {
            "index.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "apibody",
        {
          _index: 94,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "apioperation",
        {
          _index: 95,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "apioperation({summary",
        {
          _index: 59,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "apiproperty",
        {
          _index: 277,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "apiproperty({example",
        {
          _index: 263,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "apiproperty({type",
        {
          _index: 268,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "apiresponse",
        {
          _index: 96,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "apitags",
        {
          _index: 97,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        'apitags("registration',
        {
          _index: 101,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "app",
        {
          _index: 297,
          title: {},
          body: { "classes/BcryptProvider.html": {}, "index.html": {} },
        },
      ],
      [
        "app_pipe",
        { _index: 32, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "app_port",
        {
          _index: 615,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "application",
        {
          _index: 199,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      ["applications", { _index: 770, title: {}, body: { "index.html": {} } }],
      [
        "appmodule",
        {
          _index: 1,
          title: { "modules/AppModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "appropriate",
        {
          _index: 978,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["arising", { _index: 912, title: {}, body: { "license.html": {} } }],
      [
        "associated",
        {
          _index: 271,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "async",
        {
          _index: 54,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "asynchronously",
        {
          _index: 307,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["auth", { _index: 924, title: {}, body: { "properties.html": {} } }],
      ["authenticate", { _index: 806, title: {}, body: { "index.html": {} } }],
      [
        "authentication",
        { _index: 781, title: {}, body: { "index.html": {} } },
      ],
      [
        "authentication.service",
        {
          _index: 91,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "authentication/authentication.controller",
        { _index: 388, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "authentication/authentication.service",
        { _index: 389, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "authenticationcontroller",
        {
          _index: 50,
          title: { "controllers/AuthenticationController.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "modules/IamModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authenticationservice",
        {
          _index: 74,
          title: { "injectables/AuthenticationService.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "author",
        {
          _index: 848,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      ["authorized", { _index: 808, title: {}, body: { "index.html": {} } }],
      ["authors", { _index: 902, title: {}, body: { "license.html": {} } }],
      ["available", { _index: 919, title: {}, body: { "modules.html": {} } }],
      [
        "avoid",
        {
          _index: 132,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "await",
        {
          _index: 110,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "aws",
        {
          _index: 610,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["backend", { _index: 777, title: {}, body: { "index.html": {} } }],
      ["backers", { _index: 839, title: {}, body: { "index.html": {} } }],
      [
        "badrequestexception",
        {
          _index: 564,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "base",
        {
          _index: 373,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "classes/PublicUserDTO.html": {},
          },
        },
      ],
      [
        "based",
        {
          _index: 656,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "basepublicuserdto",
        {
          _index: 235,
          title: { "classes/BasePublicUserDto.html": {} },
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "basepublicuserdto:15",
        { _index: 429, title: {}, body: { "classes/PublicUserDTO.html": {} } },
      ],
      [
        "basepublicuserdto:19",
        { _index: 430, title: {}, body: { "classes/PublicUserDTO.html": {} } },
      ],
      [
        "basepublicuserdto:23",
        { _index: 428, title: {}, body: { "classes/PublicUserDTO.html": {} } },
      ],
      [
        "basepublicuserdto:27",
        { _index: 431, title: {}, body: { "classes/PublicUserDTO.html": {} } },
      ],
      [
        "baseuserdto",
        {
          _index: 261,
          title: { "classes/BaseUserDto.html": {} },
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "baseuserdto:11",
        { _index: 371, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "baseuserdto:15",
        { _index: 370, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "baseuserdto:26",
        { _index: 372, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "bcrypt",
        {
          _index: 287,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "bcrypt.compare(data",
        { _index: 319, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "bcrypt.gensalt(this.saltround",
        { _index: 325, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "bcrypt.hashsync(data",
        { _index: 326, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "bcryptprovider",
        {
          _index: 283,
          title: { "classes/BcryptProvider.html": {} },
          body: {
            "classes/BcryptProvider.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "before",
        {
          _index: 158,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "being",
        {
          _index: 592,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "body",
        {
          _index: 89,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "boolean",
        {
          _index: 415,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "bootstrap",
        {
          _index: 6,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "brand",
        {
          _index: 756,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      ["browse", { _index: 917, title: {}, body: { "modules.html": {} } }],
      ["browser", { _index: 915, title: {}, body: { "modules.html": {} } }],
      [
        "buffer",
        {
          _index: 300,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "build",
        {
          _index: 989,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["building", { _index: 765, title: {}, body: { "index.html": {} } }],
      ["c", { _index: 855, title: {}, body: { "license.html": {} } }],
      [
        "ca",
        {
          _index: 957,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "calling",
        {
          _index: 71,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "cascade",
        { _index: 541, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "case",
        {
          _index: 184,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "catch",
        {
          _index: 229,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "caught",
        {
          _index: 593,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "cause",
        {
          _index: 231,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "character",
        { _index: 367, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "character'})@isstrongpassword({minlength",
        { _index: 361, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "characters",
        { _index: 355, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      ["charge", { _index: 861, title: {}, body: { "license.html": {} } }],
      [
        "check",
        {
          _index: 144,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "checker",
        { _index: 724, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "checking",
        {
          _index: 129,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["choice", { _index: 811, title: {}, body: { "index.html": {} } }],
      ["claim", { _index: 905, title: {}, body: { "license.html": {} } }],
      [
        "class",
        {
          _index: 46,
          title: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "classes/ValidateEnvironment.html": {},
          },
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "classes",
        {
          _index: 236,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "classes/ValidateEnvironment.html": {},
            "overview.html": {},
          },
        },
      ],
      ["cli", { _index: 746, title: {}, body: { "dependencies.html": {} } }],
      [
        "cluster_appmodule",
        {
          _index: 9,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_appmodule_imports",
        {
          _index: 10,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_iammodule",
        {
          _index: 382,
          title: {},
          body: { "modules/IamModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_iammodule_imports",
        {
          _index: 384,
          title: {},
          body: { "modules/IamModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_iammodule_providers",
        {
          _index: 383,
          title: {},
          body: { "modules/IamModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_passwordmodule",
        {
          _index: 399,
          title: {},
          body: { "modules/PasswordModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_passwordmodule_exports",
        {
          _index: 401,
          title: {},
          body: { "modules/PasswordModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_passwordmodule_providers",
        {
          _index: 400,
          title: {},
          body: { "modules/PasswordModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_transactionsmodule",
        {
          _index: 521,
          title: {},
          body: { "modules/TransactionsModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_transactionsmodule_exports",
        {
          _index: 522,
          title: {},
          body: { "modules/TransactionsModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_transactionsmodule_providers",
        {
          _index: 523,
          title: {},
          body: { "modules/TransactionsModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule",
        {
          _index: 597,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule_exports",
        {
          _index: 599,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule_imports",
        { _index: 598, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "cluster_usersmodule_providers",
        {
          _index: 600,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "code",
        {
          _index: 170,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "column",
        {
          _index: 493,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "column({unique",
        { _index: 530, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "commented",
        {
          _index: 169,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "common/types/email",
        {
          _index: 276,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "common/util/email.util",
        {
          _index: 570,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "compare",
        {
          _index: 291,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "compare(data",
        {
          _index: 299,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
          },
        },
      ],
      [
        "comparepassword",
        {
          _index: 406,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "comparepassword(providedpassword",
        {
          _index: 411,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "compares",
        {
          _index: 285,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "comparison",
        { _index: 313, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "completed",
        { _index: 281, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "compodoc/compodoc",
        { _index: 709, title: {}, body: { "dependencies.html": {} } },
      ],
      ["conditions", { _index: 884, title: {}, body: { "license.html": {} } }],
      [
        "config",
        {
          _index: 659,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "configmodule",
        {
          _index: 329,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "configmodule.forroot",
        {
          _index: 339,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "configservice",
        {
          _index: 330,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        'configservice.get("db_engine',
        {
          _index: 968,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_database',
        {
          _index: 936,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_host',
        {
          _index: 933,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_password',
        {
          _index: 939,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_port',
        {
          _index: 935,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_username',
        {
          _index: 938,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("db_host',
        {
          _index: 947,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("db_name',
        {
          _index: 949,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("db_password',
        {
          _index: 951,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("db_port',
        {
          _index: 948,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("db_user',
        {
          _index: 950,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("postgres_database',
        {
          _index: 964,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("postgres_host',
        {
          _index: 965,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("postgres_password',
        {
          _index: 963,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("postgres_url',
        {
          _index: 954,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("postgres_user',
        {
          _index: 962,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "configuration",
        {
          _index: 655,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "configuration/configuration.module",
        { _index: 28, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "configurationmodule",
        {
          _index: 11,
          title: { "modules/ConfigurationModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "conflict",
        {
          _index: 143,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "conflictexception",
        {
          _index: 152,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        'conflictexception("user',
        {
          _index: 222,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "conflicts",
        {
          _index: 133,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "connecting",
        {
          _index: 942,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["connection", { _index: 913, title: {}, body: { "license.html": {} } }],
      [
        'console.log("caught',
        {
          _index: 590,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "const",
        {
          _index: 218,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "constraint",
        {
          _index: 185,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "constructor",
        {
          _index: 118,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "constructor(datasource",
        {
          _index: 437,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "constructor(hashalgorithm",
        {
          _index: 408,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "constructor(private",
        {
          _index: 102,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "constructor(sharedtransactions",
        {
          _index: 554,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "constructor(userservice",
        {
          _index: 119,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "container",
        {
          _index: 946,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "containing",
        {
          _index: 82,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "contains",
        { _index: 348, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      ["contract", { _index: 910, title: {}, body: { "license.html": {} } }],
      [
        "controller",
        {
          _index: 49,
          title: { "controllers/AuthenticationController.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "controllers",
        {
          _index: 35,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      ["copies", { _index: 879, title: {}, body: { "license.html": {} } }],
      ["copy", { _index: 864, title: {}, body: { "license.html": {} } }],
      ["copyright", { _index: 854, title: {}, body: { "license.html": {} } }],
      [
        "corrected",
        {
          _index: 588,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "coverage",
        {
          _index: 672,
          title: { "coverage.html": {} },
          body: { "coverage.html": {}, "index.html": {} },
        },
      ],
      [
        "create",
        {
          _index: 60,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/LoginUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "created",
        {
          _index: 65,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "createdat",
        { _index: 488, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "createdatecolumn",
        { _index: 491, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "createentity",
        {
          _index: 435,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "createentity(entityclass",
        {
          _index: 440,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "creates",
        {
          _index: 446,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "createtransaction",
        {
          _index: 551,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "createtransaction(newuser",
        {
          _index: 450,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "createuserdto",
        {
          _index: 57,
          title: { "classes/CreateUserDto.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/CreateUserDto.html": {},
            "classes/LoginUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createuserdto})@post",
        {
          _index: 67,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "creating",
        {
          _index: 136,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "creation",
        {
          _index: 160,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "criteria",
        { _index: 352, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      ["crud", { _index: 798, title: {}, body: { "index.html": {} } }],
      ["damages", { _index: 906, title: {}, body: { "license.html": {} } }],
      [
        "data",
        {
          _index: 79,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/UserService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "database",
        {
          _index: 137,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/ValidateEnvironment.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "database/database.config",
        {
          _index: 335,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      ["databases", { _index: 797, title: {}, body: { "index.html": {} } }],
      [
        "datasource",
        {
          _index: 438,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      ["date", { _index: 490, title: {}, body: { "entities/Todo.html": {} } }],
      [
        "db",
        {
          _index: 652,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "db_engine",
        {
          _index: 616,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "db_host",
        {
          _index: 617,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "db_name",
        {
          _index: 618,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "db_password",
        {
          _index: 619,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "db_port",
        {
          _index: 620,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "db_user",
        {
          _index: 621,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      ["deal", { _index: 867, title: {}, body: { "license.html": {} } }],
      ["dealings", { _index: 914, title: {}, body: { "license.html": {} } }],
      [
        "declarations",
        {
          _index: 5,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "decorators",
        {
          _index: 58,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/PublicUserDTO.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "deeppartial",
        {
          _index: 443,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "default",
        {
          _index: 206,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "defined",
        {
          _index: 68,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "classes/IdDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "injectables/TodoTransactionService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "dependencies",
        {
          _index: 3,
          title: { "dependencies.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "description",
        {
          _index: 63,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "properties.html": {},
          },
        },
      ],
      ["design", { _index: 796, title: {}, body: { "index.html": {} } }],
      [
        "details",
        {
          _index: 189,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "develop",
        {
          _index: 773,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      ["development", { _index: 819, title: {}, body: { "index.html": {} } }],
      ["distribute", { _index: 875, title: {}, body: { "license.html": {} } }],
      [
        "docker",
        {
          _index: 945,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "documentation",
        {
          _index: 673,
          title: {},
          body: {
            "coverage.html": {},
            "license.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "documentbuilder",
        {
          _index: 980,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "doe",
        { _index: 278, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "doe'})@isnotempty()@isstring",
        {
          _index: 266,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      ["dotenv", { _index: 720, title: {}, body: { "dependencies.html": {} } }],
      [
        "dto",
        {
          _index: 466,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "dto.ts",
        {
          _index: 392,
          title: {},
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "dto.ts:6",
        { _index: 394, title: {}, body: { "classes/IdDto.html": {} } },
      ],
      [
        "dto/create",
        {
          _index: 565,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "due",
        {
          _index: 479,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "during",
        {
          _index: 141,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["e2e", { _index: 827, title: {}, body: { "index.html": {} } }],
      [
        "each",
        {
          _index: 260,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
          },
        },
      ],
      ["efficient", { _index: 766, title: {}, body: { "index.html": {} } }],
      [
        "elsewhere",
        {
          _index: 198,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "email",
        {
          _index: 147,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "enableimplicitconversion",
        {
          _index: 44,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "encrypt",
        { _index: 327, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "encrypted",
        {
          _index: 286,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "encryptedpassword",
        {
          _index: 412,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      ["endpoint", { _index: 805, title: {}, body: { "index.html": {} } }],
      ["endpoints", { _index: 803, title: {}, body: { "index.html": {} } }],
      [
        "engine",
        {
          _index: 979,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "enhancements",
        {
          _index: 168,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "ensure",
        {
          _index: 955,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "ensuring",
        {
          _index: 200,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "entities",
        {
          _index: 485,
          title: {},
          body: {
            "entities/Todo.html": {},
            "entities/User.html": {},
            "overview.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "entity",
        {
          _index: 100,
          title: { "entities/Todo.html": {}, "entities/User.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        'entity("todos',
        { _index: 509, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        'entity("users',
        { _index: 544, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts",
        {
          _index: 487,
          title: {},
          body: {
            "entities/Todo.html": {},
            "entities/User.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "entity.ts:16",
        { _index: 535, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:17",
        { _index: 498, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity.ts:18",
        { _index: 532, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:19",
        { _index: 496, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity.ts:20",
        { _index: 536, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:21",
        { _index: 499, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity.ts:22",
        { _index: 531, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:23",
        { _index: 494, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity.ts:24",
        { _index: 537, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:25",
        { _index: 492, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity.ts:26",
        { _index: 542, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:27",
        { _index: 501, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity.ts:29",
        { _index: 504, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "entity/user",
        {
          _index: 566,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "entityclass",
        {
          _index: 453,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "entitytarget",
        {
          _index: 441,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "env",
        {
          _index: 317,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "env/validate",
        {
          _index: 337,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "envfilepath",
        {
          _index: 340,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "environment",
        {
          _index: 338,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "environment.ts",
        {
          _index: 606,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "environment.ts:18",
        {
          _index: 635,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:21",
        {
          _index: 638,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:24",
        {
          _index: 639,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:27",
        {
          _index: 637,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:30",
        {
          _index: 636,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:33",
        {
          _index: 634,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:38",
        {
          _index: 642,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:41",
        {
          _index: 643,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:44",
        {
          _index: 641,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:47",
        {
          _index: 640,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:52",
        {
          _index: 646,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:55",
        {
          _index: 649,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:58",
        {
          _index: 645,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:61",
        {
          _index: 647,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:64",
        {
          _index: 648,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:69",
        {
          _index: 632,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "environment.ts:74",
        {
          _index: 644,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "err",
        { _index: 320, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "error",
        {
          _index: 183,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "error(s",
        {
          _index: 669,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "error.code",
        {
          _index: 476,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "error.detail",
        {
          _index: 232,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "error.stack",
        {
          _index: 234,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "errors",
        {
          _index: 140,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "errors.length",
        {
          _index: 666,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "etc",
        {
          _index: 203,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["event", { _index: 901, title: {}, body: { "license.html": {} } }],
      [
        "example",
        {
          _index: 272,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "exception",
        { _index: 296, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "exceptions",
        {
          _index: 192,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "existing",
        {
          _index: 130,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "exists",
        {
          _index: 149,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "export",
        {
          _index: 45,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "exports",
        {
          _index: 8,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "expose",
        {
          _index: 252,
          title: {},
          body: { "classes/BasePublicUserDto.html": {} },
        },
      ],
      [
        "expose()@ispositive()@isint",
        {
          _index: 246,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/PublicUserDTO.html": {},
          },
        },
      ],
      [
        "expose()@isstring()@isnotempty",
        {
          _index: 243,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/PublicUserDTO.html": {},
          },
        },
      ],
      [
        "expose()@type(undefined)@validatenested({each",
        {
          _index: 249,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/PublicUserDTO.html": {},
          },
        },
      ],
      [
        "express",
        {
          _index: 714,
          title: {},
          body: { "dependencies.html": {}, "license.html": {} },
        },
      ],
      [
        "extends",
        {
          _index: 347,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "classes/LoginUserDto.html": {},
            "classes/PublicUserDTO.html": {},
          },
        },
      ],
      [
        "externals",
        { _index: 749, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "failed",
        {
          _index: 478,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "false",
        {
          _index: 282,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "field",
        { _index: 349, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "file",
        {
          _index: 22,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["files", { _index: 866, title: {}, body: { "license.html": {} } }],
      ["filtering", { _index: 783, title: {}, body: { "index.html": {} } }],
      [
        "find",
        {
          _index: 458,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "findoneentitybyid",
        {
          _index: 436,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "findoneentitybyid(entityclass",
        {
          _index: 454,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "findoneorfail",
        {
          _index: 586,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "findoneuserbyemail",
        {
          _index: 581,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "findoneuserbyemail(entityclass",
        {
          _index: 583,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "finds",
        {
          _index: 456,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "finduserbyemail",
        {
          _index: 552,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "finduserbyemail(email",
        {
          _index: 558,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "finduserbyid",
        {
          _index: 553,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "finduserbyid(id",
        {
          _index: 562,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["fitness", { _index: 897, title: {}, body: { "license.html": {} } }],
      [
        "following",
        {
          _index: 802,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      [
        "forbidnonwhitelisted",
        { _index: 42, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      ["fork", { _index: 722, title: {}, body: { "dependencies.html": {} } }],
      [
        "format",
        {
          _index: 573,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "found",
        {
          _index: 151,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["framework", { _index: 764, title: {}, body: { "index.html": {} } }],
      ["free", { _index: 860, title: {}, body: { "license.html": {} } }],
      [
        "fs.readfilesync(cacertpath).tostring",
        {
          _index: 958,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "function",
        {
          _index: 660,
          title: {},
          body: { "classes/ValidateEnvironment.html": {}, "coverage.html": {} },
        },
      ],
      [
        "functions",
        {
          _index: 752,
          title: { "miscellaneous/functions.html": {} },
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      ["furnished", { _index: 882, title: {}, body: { "license.html": {} } }],
      [
        "generate",
        {
          _index: 227,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "generated",
        {
          _index: 173,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
          },
        },
      ],
      [
        "generates",
        {
          _index: 308,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "generation",
        {
          _index: 172,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "getdockerdbconfig",
        {
          _index: 682,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "getdockerdbconfig(configservice",
        {
          _index: 972,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "getrdsconfig",
        {
          _index: 683,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "getrdsconfig(configservice",
        {
          _index: 974,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "getting",
        {
          _index: 758,
          title: { "index.html": {}, "license.html": {} },
          body: {},
        },
      ],
      [
        "getverceldbconfig",
        {
          _index: 684,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "getverceldbconfig(configservice",
        {
          _index: 973,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "global",
        { _index: 315, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      ["goals", { _index: 792, title: {}, body: { "index.html": {} } }],
      ["granted", { _index: 859, title: {}, body: { "license.html": {} } }],
      ["graph", { _index: 918, title: {}, body: { "modules.html": {} } }],
      ["grow", { _index: 834, title: {}, body: { "index.html": {} } }],
      [
        "handle",
        {
          _index: 471,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "handled",
        {
          _index: 197,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "handles",
        {
          _index: 126,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "handling",
        {
          _index: 138,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "hash",
        {
          _index: 156,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
          },
        },
      ],
      [
        "hash(data",
        {
          _index: 305,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
          },
        },
      ],
      [
        "hash/bcrypt.provider",
        {
          _index: 403,
          title: {},
          body: {
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "hashalgorithm",
        {
          _index: 410,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "hashalgorithminterface",
        {
          _index: 289,
          title: { "interfaces/HashAlgorithmInterface.html": {} },
          body: {
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "hashed",
        {
          _index: 162,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      [
        "hashedpassword",
        {
          _index: 224,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "hashes",
        {
          _index: 421,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "hashing",
        {
          _index: 134,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
          },
        },
      ],
      [
        "hashpassword",
        {
          _index: 407,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "hashpassword(password",
        {
          _index: 419,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      ["here", { _index: 845, title: {}, body: { "index.html": {} } }],
      ["hereby", { _index: 858, title: {}, body: { "license.html": {} } }],
      ["holders", { _index: 903, title: {}, body: { "license.html": {} } }],
      [
        "host",
        {
          _index: 932,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "http://localhost:3000",
        {
          _index: 986,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "iam/iam.module",
        { _index: 31, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "iammodule",
        {
          _index: 13,
          title: { "modules/IamModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "id",
        {
          _index: 240,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "id:${id",
        {
          _index: 483,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "iddto",
        {
          _index: 390,
          title: { "classes/IdDto.html": {} },
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      ["identifier", { _index: 674, title: {}, body: { "coverage.html": {} } }],
      [
        "immediate",
        {
          _index: 175,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["implement", { _index: 780, title: {}, body: { "index.html": {} } }],
      [
        "implements",
        { _index: 288, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      ["implied", { _index: 893, title: {}, body: { "license.html": {} } }],
      [
        "import",
        {
          _index: 25,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "imports",
        {
          _index: 24,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/IamModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "include",
        {
          _index: 357,
          title: {},
          body: { "classes/CreateUserDto.html": {}, "index.html": {} },
        },
      ],
      ["included", { _index: 888, title: {}, body: { "license.html": {} } }],
      [
        "including",
        {
          _index: 128,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "index",
        {
          _index: 52,
          title: { "index.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "classes/IdDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "indexed",
        {
          _index: 180,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "indicating",
        {
          _index: 416,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "info",
        {
          _index: 20,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "information",
        {
          _index: 84,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "inherited",
        {
          _index: 369,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "classes/PublicUserDTO.html": {},
          },
        },
      ],
      [
        "inject",
        {
          _index: 343,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "injectable",
        {
          _index: 112,
          title: {
            "injectables/AuthenticationService.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "injectables",
        {
          _index: 113,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "inserted",
        { _index: 511, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "inside",
        {
          _index: 469,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      ["installation", { _index: 816, title: {}, body: { "index.html": {} } }],
      [
        "installrunning",
        { _index: 818, title: {}, body: { "index.html": {} } },
      ],
      [
        "instanceof",
        {
          _index: 578,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "integration",
        {
          _index: 179,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "interface",
        {
          _index: 376,
          title: { "interfaces/HashAlgorithmInterface.html": {} },
          body: {
            "interfaces/HashAlgorithmInterface.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "interfaces",
        {
          _index: 377,
          title: {},
          body: { "interfaces/HashAlgorithmInterface.html": {} },
        },
      ],
      [
        "internalservererrorexception",
        {
          _index: 310,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "internalservererrorexception(`cause",
        {
          _index: 579,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "internalservererrorexception(err",
        { _index: 323, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "invalid",
        {
          _index: 574,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "isemail",
        { _index: 275, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "isint",
        {
          _index: 254,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "isint()@ispositive",
        {
          _index: 393,
          title: {},
          body: {
            "classes/IdDto.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "isnotempty",
        {
          _index: 255,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "isnotempty()@isstring",
        {
          _index: 633,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "ispositive",
        {
          _index: 256,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "isstring",
        {
          _index: 257,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "isstrongpassword",
        { _index: 374, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "issue",
        {
          _index: 463,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "john",
        {
          _index: 265,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "john@example.com",
        { _index: 279, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "john@example.com'})@isnotempty()@isemail",
        {
          _index: 264,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      ["join", { _index: 841, title: {}, body: { "index.html": {} } }],
      [
        "jordach",
        {
          _index: 849,
          title: {},
          body: { "index.html": {}, "license.html": {}, "properties.html": {} },
        },
      ],
      ["jordachmakaya", { _index: 852, title: {}, body: { "index.html": {} } }],
      ["kind", { _index: 892, title: {}, body: { "license.html": {} } }],
      [
        "layer",
        {
          _index: 202,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "legend",
        {
          _index: 4,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["liability", { _index: 907, title: {}, body: { "license.html": {} } }],
      ["liable", { _index: 904, title: {}, body: { "license.html": {} } }],
      [
        "license",
        {
          _index: 853,
          title: { "license.html": {} },
          body: { "index.html": {}, "license.html": {}, "properties.html": {} },
        },
      ],
      ["licensed", { _index: 832, title: {}, body: { "index.html": {} } }],
      ["limitation", { _index: 870, title: {}, body: { "license.html": {} } }],
      ["limited", { _index: 894, title: {}, body: { "license.html": {} } }],
      ["limiting", { _index: 788, title: {}, body: { "index.html": {} } }],
      ["linkedin", { _index: 851, title: {}, body: { "index.html": {} } }],
      [
        "list",
        {
          _index: 270,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "entities/User.html": {},
            "index.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "local",
        {
          _index: 971,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "logged",
        {
          _index: 204,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "logger",
        {
          _index: 117,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        'logger("authenticationservice',
        {
          _index: 208,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        'logger("database',
        {
          _index: 967,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'logger("hashalgorithmprovider',
        { _index: 292, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        'logger("transactionservice',
        {
          _index: 459,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        'logger("user',
        { _index: 533, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        'logger("usertransactionservice',
        {
          _index: 585,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        'logger("validated',
        {
          _index: 662,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "logger(todo.name",
        { _index: 497, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "logger.log",
        {
          _index: 671,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        'logger.log("you',
        {
          _index: 969,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "logger.log(`${errors.length",
        {
          _index: 668,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "logger.log(`${json.stringify(errors",
        {
          _index: 670,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        'logger.warn("please',
        {
          _index: 975,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["login", { _index: 804, title: {}, body: { "index.html": {} } }],
      [
        "loginuserdto",
        {
          _index: 395,
          title: { "classes/LoginUserDto.html": {} },
          body: { "classes/LoginUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "logs",
        {
          _index: 188,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "long",
        { _index: 356, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "lowercase",
        { _index: 359, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "makaya",
        {
          _index: 850,
          title: {},
          body: { "index.html": {}, "license.html": {}, "properties.html": {} },
        },
      ],
      [
        "manage",
        {
          _index: 776,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      ["managing", { _index: 807, title: {}, body: { "index.html": {} } }],
      [
        "managment/user.service",
        { _index: 602, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "manytomany",
        { _index: 508, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "manytomany(undefined",
        { _index: 502, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "match",
        {
          _index: 418,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "matches",
        { _index: 303, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "matching",
        {
          _index: 48,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["measures", { _index: 810, title: {}, body: { "index.html": {} } }],
      ["mechanism", { _index: 791, title: {}, body: { "index.html": {} } }],
      [
        "meet",
        { _index: 350, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "meilisearch",
        {
          _index: 178,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "merchantability",
        { _index: 896, title: {}, body: { "license.html": {} } },
      ],
      ["merge", { _index: 873, title: {}, body: { "license.html": {} } }],
      [
        "message",
        {
          _index: 366,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "metadata",
        { _index: 731, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "method",
        {
          _index: 73,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "methods",
        {
          _index: 53,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "minlength",
        { _index: 375, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "minlowercase",
        { _index: 362, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "minnumbers",
        { _index: 364, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "minsymbols",
        { _index: 365, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "minuppercase",
        { _index: 363, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "miscellaneous",
        {
          _index: 751,
          title: {
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
          body: {
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "mit",
        {
          _index: 831,
          title: {},
          body: {
            "index.html": {},
            "license.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "mocked",
        {
          _index: 591,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      ["mode", { _index: 822, title: {}, body: { "index.html": {} } }],
      ["modify", { _index: 872, title: {}, body: { "license.html": {} } }],
      [
        "module",
        {
          _index: 0,
          title: {
            "modules/AppModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TodoModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
          },
          body: {
            "modules/AppModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TodoModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "overview.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "modules",
        {
          _index: 2,
          title: { "modules.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TodoModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["more", { _index: 844, title: {}, body: { "index.html": {} } }],
      [
        "name",
        {
          _index: 76,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "classes/LoginUserDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["nest", { _index: 830, title: {}, body: { "index.html": {} } }],
      [
        "nestjs/common",
        {
          _index: 27,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/config",
        {
          _index: 331,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/core",
        {
          _index: 33,
          title: {},
          body: { "modules/AppModule.html": {}, "dependencies.html": {} },
        },
      ],
      [
        "nestjs/platform",
        { _index: 713, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "nestjs/swagger",
        {
          _index: 98,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/LoginUserDto.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/typeorm",
        {
          _index: 333,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "new",
        {
          _index: 38,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "newentity",
        {
          _index: 442,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "newly",
        {
          _index: 87,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "newuser",
        {
          _index: 205,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "newuser.email",
        {
          _index: 220,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "newuser.password",
        {
          _index: 225,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "next",
        {
          _index: 226,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["node", { _index: 748, title: {}, body: { "dependencies.html": {} } }],
      ["node.js", { _index: 763, title: {}, body: { "index.html": {} } }],
      [
        "noninfringement",
        { _index: 900, title: {}, body: { "license.html": {} } },
      ],
      [
        "notfoundexception",
        {
          _index: 460,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "notfoundexception(message",
        {
          _index: 484,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      ["notice", { _index: 886, title: {}, body: { "license.html": {} } }],
      [
        "null",
        {
          _index: 561,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "number",
        {
          _index: 245,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "object",
        {
          _index: 81,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["obtaining", { _index: 863, title: {}, body: { "license.html": {} } }],
      [
        "occurred",
        {
          _index: 480,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "occurs",
        { _index: 312, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "omittype",
        { _index: 398, title: {}, body: { "classes/LoginUserDto.html": {} } },
      ],
      [
        "omittype(createuserdto",
        { _index: 397, title: {}, body: { "classes/LoginUserDto.html": {} } },
      ],
      [
        "once",
        {
          _index: 161,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "ondelete",
        { _index: 540, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "onetomany",
        { _index: 543, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "onetomany(undefined",
        { _index: 538, title: {}, body: { "entities/User.html": {} } },
      ],
      ["open", { _index: 833, title: {}, body: { "index.html": {} } }],
      ["operations", { _index: 799, title: {}, body: { "index.html": {} } }],
      [
        "optimization",
        {
          _index: 182,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "optional",
        {
          _index: 78,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "options",
        {
          _index: 941,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "otherwise",
        {
          _index: 304,
          title: {},
          body: { "classes/BcryptProvider.html": {}, "license.html": {} },
        },
      ],
      [
        "out",
        {
          _index: 19,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "license.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "output",
        {
          _index: 452,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "overview",
        {
          _index: 815,
          title: { "overview.html": {} },
          body: { "index.html": {}, "overview.html": {} },
        },
      ],
      [
        "ovoid",
        {
          _index: 217,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "package",
        {
          _index: 708,
          title: { "dependencies.html": {}, "properties.html": {} },
          body: {},
        },
      ],
      ["pagination", { _index: 813, title: {}, body: { "index.html": {} } }],
      [
        "param",
        {
          _index: 104,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "parameters",
        {
          _index: 75,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/TodoTransactionService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "parseint(process.env.salt_round",
        { _index: 294, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "part",
        { _index: 314, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      ["particular", { _index: 898, title: {}, body: { "license.html": {} } }],
      [
        "passed",
        {
          _index: 165,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "password",
        {
          _index: 135,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/PasswordService.html": {},
            "entities/User.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "password.service",
        { _index: 404, title: {}, body: { "modules/PasswordModule.html": {} } },
      ],
      [
        "password/password.module",
        { _index: 387, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "password/password.service",
        {
          _index: 210,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "password@@201",
        { _index: 353, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "passwordmodule",
        {
          _index: 385,
          title: { "modules/PasswordModule.html": {} },
          body: {
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "passwords",
        {
          _index: 417,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "passwordservice",
        {
          _index: 121,
          title: { "injectables/PasswordService.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "path",
        {
          _index: 960,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["permission", { _index: 857, title: {}, body: { "license.html": {} } }],
      ["permit", { _index: 880, title: {}, body: { "license.html": {} } }],
      ["person", { _index: 862, title: {}, body: { "license.html": {} } }],
      ["persons", { _index: 881, title: {}, body: { "license.html": {} } }],
      ["pg", { _index: 728, title: {}, body: { "dependencies.html": {} } }],
      [
        "phone",
        {
          _index: 462,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "plaintoinstance",
        {
          _index: 651,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "plaintoinstance(validateenvironment",
        {
          _index: 663,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      ["please", { _index: 842, title: {}, body: { "index.html": {} } }],
      ["plugin", { _index: 726, title: {}, body: { "dependencies.html": {} } }],
      [
        "port",
        {
          _index: 934,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["portions", { _index: 890, title: {}, body: { "license.html": {} } }],
      [
        "possible",
        {
          _index: 167,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "post",
        {
          _index: 90,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "postgres",
        {
          _index: 474,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "postgres_database",
        {
          _index: 622,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "postgres_password",
        {
          _index: 623,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "postgres_url",
        {
          _index: 624,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "postgres_user",
        {
          _index: 625,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "postgresql",
        {
          _index: 943,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "potential",
        {
          _index: 139,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "primarygeneratedcolumn",
        {
          _index: 495,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "private",
        {
          _index: 116,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "process",
        {
          _index: 127,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "process.env.swagger_licence",
        {
          _index: 988,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "prod",
        {
          _index: 653,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      ["production", { _index: 824, title: {}, body: { "index.html": {} } }],
      ["progressive", { _index: 762, title: {}, body: { "index.html": {} } }],
      ["project", { _index: 760, title: {}, body: { "index.html": {} } }],
      ["projects", { _index: 778, title: {}, body: { "index.html": {} } }],
      [
        "promise",
        {
          _index: 86,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "propagated",
        {
          _index: 195,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["proper", { _index: 812, title: {}, body: { "index.html": {} } }],
      [
        "properties",
        {
          _index: 115,
          title: { "properties.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "provide",
        { _index: 36, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "provided",
        {
          _index: 146,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "providedpassword",
        {
          _index: 414,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "providers",
        {
          _index: 7,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "public",
        {
          _index: 238,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "publicuserdto",
        {
          _index: 426,
          title: { "classes/PublicUserDTO.html": {} },
          body: { "classes/PublicUserDTO.html": {}, "coverage.html": {} },
        },
      ],
      ["publish", { _index: 874, title: {}, body: { "license.html": {} } }],
      ["purpose", { _index: 899, title: {}, body: { "license.html": {} } }],
      ["rate", { _index: 787, title: {}, body: { "index.html": {} } }],
      [
        "rds",
        {
          _index: 611,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["read", { _index: 843, title: {}, body: { "index.html": {} } }],
      [
        "readonly",
        {
          _index: 103,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "injectables/TodoTransactionService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "record",
        {
          _index: 477,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "redundant",
        {
          _index: 201,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "reflect",
        { _index: 730, title: {}, body: { "dependencies.html": {} } },
      ],
      ["refresh", { _index: 790, title: {}, body: { "index.html": {} } }],
      [
        "register",
        {
          _index: 55,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "register(@body",
        {
          _index: 108,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "register(createuserdto",
        {
          _index: 56,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "registers",
        {
          _index: 70,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "registration",
        {
          _index: 72,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "registration(newuser",
        {
          _index: 123,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "rejectunauthorized",
        {
          _index: 953,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "related",
        {
          _index: 609,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "removed",
        {
          _index: 515,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "representing",
        {
          _index: 346,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["require", { _index: 779, title: {}, body: { "index.html": {} } }],
      ["required", { _index: 772, title: {}, body: { "index.html": {} } }],
      ["requirements", { _index: 801, title: {}, body: { "index.html": {} } }],
      [
        "reset",
        {
          _index: 18,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "resolves",
        {
          _index: 302,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "restful",
        {
          _index: 774,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      ["restriction", { _index: 869, title: {}, body: { "license.html": {} } }],
      [
        "results",
        {
          _index: 47,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "retrieve",
        {
          _index: 587,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "retrieves",
        {
          _index: 966,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "return",
        {
          _index: 109,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "returned",
        {
          _index: 174,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "returns",
        {
          _index: 85,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["rights", { _index: 871, title: {}, body: { "license.html": {} } }],
      [
        "rules",
        {
          _index: 657,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "run",
        {
          _index: 733,
          title: {},
          body: { "dependencies.html": {}, "index.html": {} },
        },
      ],
      [
        "running",
        {
          _index: 944,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["rxjs", { _index: 735, title: {}, body: { "dependencies.html": {} } }],
      [
        "salt",
        { _index: 324, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "salt_round",
        {
          _index: 626,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "saltround",
        { _index: 290, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "same",
        {
          _index: 215,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "save",
        {
          _index: 468,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      ["scalable", { _index: 767, title: {}, body: { "index.html": {} } }],
      ["schema", { _index: 795, title: {}, body: { "index.html": {} } }],
      ["script", { _index: 734, title: {}, body: { "dependencies.html": {} } }],
      [
        "search",
        {
          _index: 181,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "securely",
        {
          _index: 157,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["security", { _index: 800, title: {}, body: { "index.html": {} } }],
      [
        "selectdbconfig",
        {
          _index: 334,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "selects",
        {
          _index: 977,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["sell", { _index: 878, title: {}, body: { "license.html": {} } }],
      ["server", { _index: 768, title: {}, body: { "index.html": {} } }],
      [
        "services",
        {
          _index: 194,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "setdescription(process.env.swagger_des",
        {
          _index: 982,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'setlicense("license',
        {
          _index: 987,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "settings",
        {
          _index: 614,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "settitle(process.env.swagger_des",
        {
          _index: 981,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "setversion(process.env.swagger_ver",
        {
          _index: 983,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["shall", { _index: 887, title: {}, body: { "license.html": {} } }],
      [
        "shared",
        {
          _index: 526,
          title: {},
          body: { "modules/TransactionsModule.html": {} },
        },
      ],
      [
        "sharedtransactions",
        {
          _index: 556,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "sharedtransactionsservice",
        {
          _index: 432,
          title: { "injectables/SharedTransactionsService.html": {} },
          body: {
            "injectables/SharedTransactionsService.html": {},
            "modules/TransactionsModule.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      ["side", { _index: 769, title: {}, body: { "index.html": {} } }],
      ["skills", { _index: 793, title: {}, body: { "index.html": {} } }],
      [
        "skipmissingproperties",
        {
          _index: 665,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      ["software", { _index: 865, title: {}, body: { "license.html": {} } }],
      ["solution", { _index: 814, title: {}, body: { "index.html": {} } }],
      ["sorting", { _index: 784, title: {}, body: { "index.html": {} } }],
      [
        "source",
        {
          _index: 21,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "classes/LoginUserDto.html": {},
            "modules/PasswordModule.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TodoModule.html": {},
            "injectables/TodoTransactionService.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "classes/ValidateEnvironment.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "special",
        { _index: 360, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "specific",
        { _index: 351, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "specified",
        {
          _index: 976,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["sponsors", { _index: 836, title: {}, body: { "index.html": {} } }],
      [
        "src/.../database.config.ts",
        {
          _index: 929,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../email.ts",
        {
          _index: 927,
          title: {},
          body: { "miscellaneous/typealiases.html": {} },
        },
      ],
      [
        "src/.../email.util.ts",
        {
          _index: 755,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/.../main.ts",
        {
          _index: 753,
          title: {},
          body: {
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../swagger.doc.ts",
        {
          _index: 930,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../validate",
        {
          _index: 754,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/app.module.ts",
        { _index: 23, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "src/common/id",
        {
          _index: 391,
          title: {},
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/common/types/email.ts",
        {
          _index: 928,
          title: {},
          body: { "miscellaneous/typealiases.html": {} },
        },
      ],
      [
        "src/common/util/email.util.ts",
        {
          _index: 677,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/configuration/configuration.module.ts",
        {
          _index: 328,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "src/configuration/database/database.config.ts",
        {
          _index: 680,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/configuration/env/validate",
        {
          _index: 605,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "src/configuration/swagger/swagger.doc.ts",
        {
          _index: 687,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/iam/authentication/authentication.controller.ts",
        {
          _index: 51,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/authentication/authentication.controller.ts:22",
        {
          _index: 69,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "src/iam/authentication/authentication.service.ts",
        {
          _index: 114,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/authentication/authentication.service.ts:10",
        {
          _index: 122,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "src/iam/authentication/authentication.service.ts:54",
        {
          _index: 124,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "src/iam/iam.module.ts",
        { _index: 386, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "src/iam/password/hash/bcrypt.provider.ts",
        {
          _index: 284,
          title: {},
          body: { "classes/BcryptProvider.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/password/hash/bcrypt.provider.ts:15",
        { _index: 293, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "src/iam/password/hash/bcrypt.provider.ts:21",
        { _index: 295, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "src/iam/password/hash/bcrypt.provider.ts:31",
        { _index: 301, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "src/iam/password/hash/bcrypt.provider.ts:48",
        { _index: 306, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "src/iam/password/hash/hash",
        {
          _index: 378,
          title: {},
          body: {
            "interfaces/HashAlgorithmInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/password/password.module.ts",
        { _index: 402, title: {}, body: { "modules/PasswordModule.html": {} } },
      ],
      [
        "src/iam/password/password.service.ts",
        {
          _index: 405,
          title: {},
          body: { "injectables/PasswordService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/password/password.service.ts:14",
        {
          _index: 420,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "src/iam/password/password.service.ts:25",
        {
          _index: 413,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "src/iam/password/password.service.ts:5",
        {
          _index: 409,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "src/main.ts",
        {
          _index: 698,
          title: {},
          body: {
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/todo/entity/todo",
        {
          _index: 486,
          title: {},
          body: { "entities/Todo.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/todo/todo.module.ts",
        { _index: 516, title: {}, body: { "modules/TodoModule.html": {} } },
      ],
      [
        "src/transactions/shared",
        {
          _index: 433,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/transactions/todo",
        {
          _index: 518,
          title: {},
          body: {
            "injectables/TodoTransactionService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/transactions/transactions.module.ts",
        {
          _index: 525,
          title: {},
          body: { "modules/TransactionsModule.html": {} },
        },
      ],
      [
        "src/transactions/user",
        {
          _index: 580,
          title: {},
          body: {
            "injectables/UserTransactionService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/users/dto/base",
        {
          _index: 237,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/users/dto/create",
        {
          _index: 345,
          title: {},
          body: { "classes/CreateUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/login",
        {
          _index: 396,
          title: {},
          body: { "classes/LoginUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/public",
        {
          _index: 427,
          title: {},
          body: { "classes/PublicUserDTO.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/entity/user",
        {
          _index: 529,
          title: {},
          body: { "entities/User.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/managment/user.service.ts",
        {
          _index: 550,
          title: {},
          body: { "injectables/UserService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/managment/user.service.ts:14",
        {
          _index: 555,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/managment/user.service.ts:28",
        {
          _index: 557,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/managment/user.service.ts:38",
        {
          _index: 563,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/managment/user.service.ts:50",
        {
          _index: 559,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/users.module.ts",
        { _index: 601, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "ssl",
        {
          _index: 952,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["start", { _index: 820, title: {}, body: { "index.html": {} } }],
      ["start:dev", { _index: 823, title: {}, body: { "index.html": {} } }],
      [
        "start:prodtest",
        { _index: 825, title: {}, body: { "index.html": {} } },
      ],
      [
        "started",
        {
          _index: 759,
          title: { "index.html": {}, "license.html": {} },
          body: {},
        },
      ],
      ["statements", { _index: 675, title: {}, body: { "coverage.html": {} } }],
      [
        "status",
        {
          _index: 106,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      ["stay", { _index: 846, title: {}, body: { "index.html": {} } }],
      [
        "stop",
        { _index: 298, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "store",
        {
          _index: 228,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "storing",
        {
          _index: 159,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "strategy",
        { _index: 316, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "string",
        {
          _index: 242,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["subject", { _index: 883, title: {}, body: { "license.html": {} } }],
      ["sublicense", { _index: 876, title: {}, body: { "license.html": {} } }],
      ["substantial", { _index: 889, title: {}, body: { "license.html": {} } }],
      [
        "successful",
        {
          _index: 88,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "successfully",
        {
          _index: 107,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "entities/Todo.html": {},
            "classes/ValidateEnvironment.html": {},
          },
        },
      ],
      [
        "successfully.'})@apibody({type",
        {
          _index: 66,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "such",
        {
          _index: 216,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "summary",
        {
          _index: 105,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "supabase",
        { _index: 737, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "support",
        {
          _index: 837,
          title: {},
          body: { "index.html": {}, "modules.html": {} },
        },
      ],
      ["svg", { _index: 916, title: {}, body: { "modules.html": {} } }],
      [
        "swagger",
        {
          _index: 613,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "swagger_add_svr",
        {
          _index: 627,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "swagger_des",
        {
          _index: 628,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "swagger_licence",
        {
          _index: 629,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "swagger_prefix",
        {
          _index: 630,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "swagger_ver",
        {
          _index: 631,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "swaggerdoc",
        {
          _index: 688,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "symbol",
        {
          _index: 757,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "synchronize",
        {
          _index: 940,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "system",
        {
          _index: 125,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "t",
        {
          _index: 445,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "table",
        {
          _index: 534,
          title: {},
          body: { "entities/User.html": {}, "coverage.html": {} },
        },
      ],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 707, title: {}, body: { "coverage.html": {} } },
      ],
      ["terser", { _index: 741, title: {}, body: { "dependencies.html": {} } }],
      ["test", { _index: 826, title: {}, body: { "index.html": {} } }],
      [
        "test:covsupport",
        { _index: 829, title: {}, body: { "index.html": {} } },
      ],
      ["test:e2e", { _index: 828, title: {}, body: { "index.html": {} } }],
      ["tests", { _index: 786, title: {}, body: { "index.html": {} } }],
      ["thanks", { _index: 835, title: {}, body: { "index.html": {} } }],
      [
        "this.authenticationservice.registration(createuserdto",
        {
          _index: 111,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "this.datasource.transaction",
        {
          _index: 464,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "this.hashalgorithm.compare",
        {
          _index: 425,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "this.hashalgorithm.hash(password",
        {
          _index: 424,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "this.id",
        {
          _index: 512,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "this.logger.error",
        {
          _index: 191,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        'this.logger.error("failed',
        { _index: 321, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "this.logger.error(`cause",
        {
          _index: 596,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "this.logger.error(`details",
        {
          _index: 233,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.logger.error(`failed",
        {
          _index: 230,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.logger.error(err",
        { _index: 322, title: {}, body: { "classes/BcryptProvider.html": {} } },
      ],
      [
        "this.logger.log",
        {
          _index: 594,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "this.logger.log(`new",
        { _index: 510, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "this.logger.log(`no",
        {
          _index: 482,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "this.logger.log(`successfully",
        { _index: 545, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "this.logger.log(`todo",
        { _index: 514, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "this.logger.log(`total",
        { _index: 548, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "this.logger.log(`updated",
        { _index: 513, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "this.name",
        { _index: 546, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "this.passwordservice.hashpassword",
        {
          _index: 155,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.sharedtransactions.createentity(user",
        {
          _index: 571,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.sharedtransactions.findoneentitybyid(user",
        {
          _index: 572,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.todos.length",
        { _index: 549, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "this.transactionservice.createentity(user",
        {
          _index: 451,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "this.userservice.createtransaction",
        {
          _index: 164,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.userservice.finduserbyemail",
        {
          _index: 150,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.usertransactionservice.findoneuserbyemail",
        {
          _index: 577,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["throttling", { _index: 789, title: {}, body: { "index.html": {} } }],
      [
        "through",
        {
          _index: 163,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "throw",
        {
          _index: 221,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "thrown",
        {
          _index: 153,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
          },
        },
      ],
      [
        "throws",
        {
          _index: 214,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "title",
        {
          _index: 280,
          title: {},
          body: { "classes/BaseUserDto.html": {}, "entities/Todo.html": {} },
        },
      ],
      [
        "todo",
        {
          _index: 241,
          title: { "entities/Todo.html": {} },
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "todo.user",
        { _index: 539, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "todo/entity/todo",
        {
          _index: 251,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "todo/todo.module",
        { _index: 30, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "todomodule",
        {
          _index: 14,
          title: { "modules/TodoModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/TodoModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "todos",
        {
          _index: 262,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/LoginUserDto.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "todotransactionservice",
        {
          _index: 517,
          title: { "injectables/TodoTransactionService.html": {} },
          body: {
            "injectables/TodoTransactionService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "token",
        {
          _index: 171,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "index.html": {},
          },
        },
      ],
      ["tort", { _index: 911, title: {}, body: { "license.html": {} } }],
      ["touch", { _index: 847, title: {}, body: { "index.html": {} } }],
      [
        "transaction",
        {
          _index: 447,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "transaction.service",
        {
          _index: 528,
          title: {},
          body: {
            "modules/TransactionsModule.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "transaction.service.ts",
        {
          _index: 519,
          title: {},
          body: {
            "injectables/TodoTransactionService.html": {},
            "injectables/UserTransactionService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "transaction.service.ts:12",
        {
          _index: 582,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "transaction.service.ts:15",
        {
          _index: 584,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      [
        "transaction.service.ts:5",
        {
          _index: 520,
          title: {},
          body: { "injectables/TodoTransactionService.html": {} },
        },
      ],
      [
        "transactionalentitymanager",
        {
          _index: 465,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "transactionalentitymanager.create",
        {
          _index: 467,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "transactionalentitymanager.findoneby(entityclass",
        {
          _index: 481,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "transactionalentitymanager.save(entity",
        {
          _index: 470,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "transactions.service",
        {
          _index: 527,
          title: {},
          body: {
            "modules/TransactionsModule.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "transactions.service.ts",
        {
          _index: 434,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "transactions.service.ts:14",
        {
          _index: 439,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "transactions.service.ts:33",
        {
          _index: 444,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "transactions.service.ts:72",
        {
          _index: 455,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "transactions/shared",
        {
          _index: 567,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "transactions/transactions.module",
        {
          _index: 34,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "transactions/user",
        {
          _index: 568,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "transactionsmodule",
        {
          _index: 15,
          title: { "modules/TransactionsModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "transfer",
        {
          _index: 80,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "transform",
        { _index: 41, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "transformer",
        {
          _index: 253,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/ValidateEnvironment.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "transformoptions",
        { _index: 43, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "true",
        {
          _index: 40,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "entities/User.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "try",
        {
          _index: 223,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "trying",
        {
          _index: 595,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      ["ts", { _index: 723, title: {}, body: { "dependencies.html": {} } }],
      [
        "type",
        {
          _index: 77,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/BcryptProvider.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/HashAlgorithmInterface.html": {},
            "classes/IdDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "injectables/TodoTransactionService.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "typealiases",
        {
          _index: 925,
          title: { "miscellaneous/typealiases.html": {} },
          body: {},
        },
      ],
      [
        "typeorm",
        {
          _index: 461,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "injectables/TodoTransactionService.html": {},
            "entities/User.html": {},
            "injectables/UserTransactionService.html": {},
            "dependencies.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "typeormmodule",
        {
          _index: 332,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "typeormmodule.forfeature([user",
        { _index: 603, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "typeormmodule.forrootasync",
        {
          _index: 342,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "typeormmoduleoptions",
        {
          _index: 931,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "typo",
        {
          _index: 589,
          title: {},
          body: { "injectables/UserTransactionService.html": {} },
        },
      ],
      ["ui", { _index: 739, title: {}, body: { "dependencies.html": {} } }],
      [
        "undefined",
        {
          _index: 269,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "undefined})@type(undefined)@validatenested({each",
        {
          _index: 273,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "underlying",
        {
          _index: 193,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "unexpected",
        {
          _index: 187,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "unique",
        {
          _index: 472,
          title: {},
          body: {
            "injectables/SharedTransactionsService.html": {},
            "entities/User.html": {},
          },
        },
      ],
      ["unit", { _index: 785, title: {}, body: { "index.html": {} } }],
      [
        "unknown",
        {
          _index: 423,
          title: {},
          body: {
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
          },
        },
      ],
      [
        "up",
        {
          _index: 196,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "updated",
        { _index: 547, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "updatedat",
        { _index: 489, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "updatedatecolumn",
        { _index: 500, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "upon",
        {
          _index: 177,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "uppercase",
        { _index: 358, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "url",
        {
          _index: 761,
          title: {},
          body: { "index.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "usage",
        {
          _index: 449,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "use",
        {
          _index: 176,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UserTransactionService.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      ["used", { _index: 794, title: {}, body: { "index.html": {} } }],
      [
        "usefactory",
        {
          _index: 344,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "user",
        {
          _index: 64,
          title: { "entities/User.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "modules/TransactionsModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "user's",
        {
          _index: 83,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "user'})@apiresponse({status",
        {
          _index: 61,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "user.dto",
        {
          _index: 93,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/CreateUserDto.html": {},
            "classes/LoginUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "user.dto.ts",
        {
          _index: 239,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/LoginUserDto.html": {},
            "classes/PublicUserDTO.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "user.dto.ts:11",
        { _index: 267, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.dto.ts:15",
        {
          _index: 247,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
          },
        },
      ],
      [
        "user.dto.ts:19",
        {
          _index: 248,
          title: {},
          body: { "classes/BasePublicUserDto.html": {} },
        },
      ],
      [
        "user.dto.ts:23",
        {
          _index: 244,
          title: {},
          body: { "classes/BasePublicUserDto.html": {} },
        },
      ],
      [
        "user.dto.ts:26",
        { _index: 274, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.dto.ts:27",
        {
          _index: 250,
          title: {},
          body: { "classes/BasePublicUserDto.html": {} },
        },
      ],
      [
        "user.dto.ts:29",
        { _index: 368, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "user.todos",
        { _index: 503, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "useralreadyexist",
        {
          _index: 219,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "username",
        {
          _index: 937,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "users",
        {
          _index: 131,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "index.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "users/dto/create",
        {
          _index: 92,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "users/entity/user",
        {
          _index: 99,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "injectables/UserTransactionService.html": {},
          },
        },
      ],
      [
        "users/managment/user.service",
        {
          _index: 209,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "users/users.module",
        {
          _index: 29,
          title: {},
          body: { "modules/AppModule.html": {}, "modules/IamModule.html": {} },
        },
      ],
      [
        "userservice",
        {
          _index: 120,
          title: { "injectables/UserService.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usersmodule",
        {
          _index: 16,
          title: { "modules/UsersModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usertransactionservice",
        {
          _index: 524,
          title: { "injectables/UserTransactionService.html": {} },
          body: {
            "modules/TransactionsModule.html": {},
            "injectables/UserService.html": {},
            "injectables/UserTransactionService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "uses",
        {
          _index: 154,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "usevalue",
        { _index: 37, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "using",
        {
          _index: 190,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/SharedTransactionsService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "valid",
        {
          _index: 956,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "validate",
        {
          _index: 341,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validated",
        {
          _index: 658,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validatedemail",
        {
          _index: 575,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "validatedenv",
        {
          _index: 336,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validatedenv(config",
        {
          _index: 661,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validateemail",
        {
          _index: 569,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validateemail(email",
        {
          _index: 576,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validateenvironment",
        {
          _index: 604,
          title: { "classes/ValidateEnvironment.html": {} },
          body: {
            "classes/ValidateEnvironment.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validatenested",
        {
          _index: 258,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
          },
        },
      ],
      [
        "validates",
        {
          _index: 654,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validatesync",
        {
          _index: 650,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "validatesync(validated",
        {
          _index: 664,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "validating",
        {
          _index: 607,
          title: {},
          body: { "classes/ValidateEnvironment.html": {} },
        },
      ],
      [
        "validation",
        {
          _index: 318,
          title: {},
          body: {
            "classes/BcryptProvider.html": {},
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "validationpipe",
        { _index: 26, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "validator",
        {
          _index: 259,
          title: {},
          body: {
            "classes/BasePublicUserDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/ValidateEnvironment.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "value",
        {
          _index: 207,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/BcryptProvider.html": {},
            "injectables/SharedTransactionsService.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserTransactionService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["variable", { _index: 681, title: {}, body: { "coverage.html": {} } }],
      [
        "variables",
        {
          _index: 608,
          title: { "miscellaneous/variables.html": {} },
          body: {
            "classes/ValidateEnvironment.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "vercel",
        {
          _index: 612,
          title: {},
          body: {
            "classes/ValidateEnvironment.html": {},
            "dependencies.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "verifies",
        {
          _index: 145,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["version", { _index: 922, title: {}, body: { "properties.html": {} } }],
      [
        "violation",
        {
          _index: 473,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      [
        "violations",
        {
          _index: 186,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["warranties", { _index: 895, title: {}, body: { "license.html": {} } }],
      ["warranty", { _index: 891, title: {}, body: { "license.html": {} } }],
      ["watch", { _index: 821, title: {}, body: { "index.html": {} } }],
      [
        "webpack",
        { _index: 725, title: {}, body: { "dependencies.html": {} } },
      ],
      ["well", { _index: 782, title: {}, body: { "index.html": {} } }],
      ["whether", { _index: 908, title: {}, body: { "license.html": {} } }],
      [
        "whitelist",
        { _index: 39, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "within",
        {
          _index: 457,
          title: {},
          body: { "injectables/SharedTransactionsService.html": {} },
        },
      ],
      ["without", { _index: 868, title: {}, body: { "license.html": {} } }],
      [
        "workflow",
        {
          _index: 142,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "working",
        {
          _index: 970,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["yarn", { _index: 817, title: {}, body: { "index.html": {} } }],
      ["you'd", { _index: 840, title: {}, body: { "index.html": {} } }],
      [
        "zoom",
        {
          _index: 17,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/PasswordModule.html": {},
            "modules/TransactionsModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
    ],
    pipeline: ["stemmer"],
  },
  store: {
    "modules/AppModule.html": {
      url: "modules/AppModule.html",
      title: "module - AppModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAppModule -->\n\nTodoModule->AppModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            IamModule\n                        \n                        \n                            TodoModule\n                        \n                        \n                            TransactionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from "@nestjs/common";\nimport { ConfigurationModule } from "./configuration/configuration.module";\nimport { UsersModule } from "./users/users.module";\nimport { TodoModule } from "./todo/todo.module";\nimport { IamModule } from "./iam/iam.module";\nimport { APP_PIPE } from "@nestjs/core";\nimport { TransactionsModule } from "./transactions/transactions.module";\n\n@Module({\n  imports: [\n    ConfigurationModule,\n    UsersModule,\n    TodoModule,\n    IamModule,\n    TransactionsModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n        transform: true,\n        forbidNonWhitelisted: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/AuthenticationController.html": {
      url: "controllers/AuthenticationController.html",
      title: "controller - AuthenticationController",
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/authentication.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: \'create new user\'})@ApiResponse({status: 200, description: \'User created successfully.\'})@ApiBody({type: CreateUserDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/iam/authentication/authentication.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Registers a new user by calling the registration method in the AuthenticationService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the user\'s registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user after successful registration.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from "@nestjs/common";\nimport { AuthenticationService } from "./authentication.service";\nimport { CreateUserDto } from "../../users/dto/create-user.dto";\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from "@nestjs/swagger";\nimport { User } from "../../users/entity/user-entity";\n\n@ApiTags("Registration")\n@Controller()\nexport class AuthenticationController {\n  constructor(private readonly authenticationService: AuthenticationService) {}\n\n  /**\n   * Registers a new user by calling the registration method in the AuthenticationService.\n   *\n   * @param {CreateUserDto} createUserDto - The data transfer object containing the user\'s registration information.\n   * @returns {Promise} The newly created user after successful registration.\n   */\n  @ApiOperation({ summary: "create new user" })\n  @ApiResponse({ status: 200, description: "User created successfully." })\n  @ApiBody({ type: CreateUserDto })\n  @Post()\n  async register(@Body() createUserDto: CreateUserDto): Promise {\n    return await this.authenticationService.registration(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/AuthenticationService.html": {
      url: "injectables/AuthenticationService.html",
      title: "injectable - AuthenticationService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                registration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                        \n                    registration(newUser: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/authentication.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Registers a new user in the system.\nThis method handles the user registration process, including checking for\nexisting users to avoid conflicts, hashing the user\'s password, creating a\nnew user in the database, and handling any potential errors during the process.\nWorkflow:\n\nConflict Check: Verifies if a user with the provided email already exists\nby calling this.userService.findUserByEmail. If a user is found, a ConflictException\nis thrown.\nPassword Hashing: Uses this.passwordService.hashPassword to hash the user\'s password\nsecurely before storing it in the database.\nUser Creation: Once the password is hashed, the user is created through the\nthis.userService.createTransaction method. The new user data is passed along with the\nhashed password.\n\nPossible Enhancements (Commented-out code):\n\nToken Generation: A token can be generated and returned for immediate use upon successful\nregistration.\nMeiliSearch Integration: The user data can be indexed in MeiliSearch for search optimization.\n\nError Handling:\n\nIn the case of any database constraint violations or other unexpected errors, the method\nlogs the details of the error using this.logger.error.\nAny exceptions from the underlying services (userService, passwordService) are propagated\nup and handled elsewhere in the application, ensuring that there is no redundant error handling\nlayer in this method.\n\n(name, email, password, etc.).\nis logged and propagated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the user\'s registration information\n(name, email, password, etc.).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user after successful registration.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("AuthenticationService")\n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/authentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, Logger } from "@nestjs/common";\nimport { CreateUserDto } from "../../users/dto/create-user.dto";\n\nimport { UserService } from "../../users/managment/user.service";\nimport { User } from "../../users/entity/user-entity";\nimport { PasswordService } from "../password/password.service";\n\n@Injectable()\nexport class AuthenticationService {\n  private readonly logger = new Logger("AuthenticationService");\n  constructor(\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  /**\n   * Registers a new user in the system.\n   *\n   * This method handles the user registration process, including checking for\n   * existing users to avoid conflicts, hashing the user\'s password, creating a\n   * new user in the database, and handling any potential errors during the process.\n   *\n   * ### Workflow:\n   * 1. **Conflict Check**: Verifies if a user with the provided email already exists\n   *    by calling `this.userService.findUserByEmail`. If a user is found, a `ConflictException`\n   *    is thrown.\n   * 2. **Password Hashing**: Uses `this.passwordService.hashPassword` to hash the user\'s password\n   *    securely before storing it in the database.\n   * 3. **User Creation**: Once the password is hashed, the user is created through the\n   *    `this.userService.createTransaction` method. The new user data is passed along with the\n   *    hashed password.\n   *\n   * ### Possible Enhancements (Commented-out code):\n   * - **Token Generation**: A token can be generated and returned for immediate use upon successful\n   *   registration.\n   * - **MeiliSearch Integration**: The user data can be indexed in MeiliSearch for search optimization.\n   *\n   * ### Error Handling:\n   * - In the case of any database constraint violations or other unexpected errors, the method\n   *   logs the details of the error using `this.logger.error`.\n   * - Any exceptions from the underlying services (`userService`, `passwordService`) are propagated\n   *   up and handled elsewhere in the application, ensuring that there is no redundant error handling\n   *   layer in this method.\n   *\n   * @param {CreateUserDto} newUser - The data transfer object containing the user\'s registration information\n   * (name, email, password, etc.).\n   *\n   * @throws {ConflictException} If a user with the same email already exists.\n   * @throws {Error} Any error thrown from the underlying services, such as database or hashing errors,\n   * is logged and propagated.\n   *\n   * @returns {Promise} The newly created user after successful registration.\n   */\n  async registration(newUser: CreateUserDto): Promise {\n    // Ovoid Conflict\n    const userAlreadyExist: User = await this.userService.findUserByEmail(\n      newUser.email\n    );\n    if (userAlreadyExist) {\n      throw new ConflictException("User already exists");\n    }\n\n    try {\n      // Hash Password\n      const hashedPassword = await this.passwordService.hashPassword(\n        newUser.password\n      );\n      return await this.userService.createTransaction({\n        ...newUser,\n        password: hashedPassword,\n      });\n\n      //next: Generate token\n      // return Token\n      // store user to meilisearch\n    } catch (error) {\n      this.logger.error(`Failed to create new user. Cause : ${error.detail}`);\n      this.logger.error(`Details : ${error.stack}`);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BasePublicUserDto.html": {
      url: "classes/BasePublicUserDto.html",
      title: "class - BasePublicUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasePublicUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/base-public-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                todo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-public-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@IsPositive()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-public-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-public-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-public-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Todo } from "../../todo/entity/todo-entity";\nimport { Expose, Type } from "class-transformer";\nimport {\n  IsInt,\n  IsNotEmpty,\n  IsPositive,\n  IsString,\n  ValidateNested,\n} from "class-validator";\n\nexport class BasePublicUserDto {\n  @Expose()\n  @IsPositive()\n  @IsInt()\n  readonly id: number;\n  @Expose()\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n  @Expose()\n  @IsString()\n  @IsNotEmpty()\n  readonly email: string;\n  @Expose()\n  @Type(() => Todo)\n  @ValidateNested({ each: true })\n  readonly todo: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BaseUserDto.html": {
      url: "classes/BaseUserDto.html",
      title: "class - BaseUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/base-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Email\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: \'John@example.com\'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: \'John Doe\'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: \'List of todos associated with the user\', example: undefined})@Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, ValidateNested } from "class-validator";\nimport { Type } from "class-transformer";\nimport { Todo } from "../../todo/entity/todo-entity";\nimport { Email } from "../../common/types/email";\nimport { ApiProperty } from "@nestjs/swagger";\n\nexport class BaseUserDto {\n  @ApiProperty({ example: "John Doe" })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n  @ApiProperty({ example: "John@example.com" })\n  @IsNotEmpty()\n  @IsEmail()\n  email: Email;\n  @ApiProperty({\n    type: [Todo],\n    description: "List of todos associated with the user",\n    example: [\n      { id: 1, title: "Todo 1", completed: false },\n      { id: 2, title: "Todo 2", completed: true },\n    ],\n  })\n  @Type(() => Todo)\n  @ValidateNested({ each: true })\n  todos: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BcryptProvider.html": {
      url: "classes/BcryptProvider.html",
      title: "class - BcryptProvider",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/hash/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Compares the provided data with an encrypted hash using bcrypt.\n\n            \n\n\n            \n                Implements\n            \n            \n                            HashAlgorithmInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("HashAlgorithmProvider")\n                    \n                \n                    \n                        \n                                Defined in src/iam/password/hash/bcrypt.provider.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRound\n                        \n                    \n                \n            \n                \n                    \n                        Default value : parseInt(process.env.SALT_ROUND)\n                    \n                \n                    \n                        \n                                Defined in src/iam/password/hash/bcrypt.provider.ts:21\n                        \n                    \n\n            \n                \n                    An exception will be thrown, and app will stop if not provided\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash/bcrypt.provider.ts:31\n                        \n                    \n\n\n            \n                \n                        Compares the provided data with an encrypted hash using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to compare, should be a string.\n\n\n                                            \n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe encrypted data to compare with the hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to true if the data matches the hash, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash/bcrypt.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        Asynchronously generates a bcrypt hash for the provided data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to be hashed, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the generated bcrypt hash.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HashAlgorithmInterface } from "./hash-algorithm.interface";\nimport * as bcrypt from "bcrypt";\nimport { InternalServerErrorException, Logger } from "@nestjs/common";\n\n/**\n * Compares the provided data with an encrypted hash using bcrypt.\n *\n * @param data - The data to compare, should be a string.\n * @param hash - The hash to compare the data against.\n * @param encrypted - The encrypted data to compare with the hash.\n * @returns A Promise that resolves to true if the data matches the hash, false otherwise.\n * @throws InternalServerErrorException if an error occurs during the comparison process.\n */\nexport class BcryptProvider implements HashAlgorithmInterface {\n  private readonly logger = new Logger("HashAlgorithmProvider");\n\n  /**\n   * @saltRound : Is part of the Global strategy for env validation,\n   * An exception will be thrown, and app will stop if not provided\n   * */\n  private readonly saltRound = parseInt(process.env.SALT_ROUND);\n\n  /**\n   * Compares the provided data with an encrypted hash using bcrypt.\n   *\n   * @param data - The data to compare, should be a string.\n   * @param encrypted - The encrypted data to compare with the hash.\n   * @returns A Promise that resolves to true if the data matches the hash, false otherwise.\n   * @throws InternalServerErrorException if an error occurs during the comparison process.\n   */\n  async compare(data: string | Buffer, encrypted: string): Promise {\n    try {\n      return await bcrypt.compare(data, encrypted);\n    } catch (err) {\n      this.logger.error("Failed to compare Password");\n      this.logger.error(err);\n      throw new InternalServerErrorException(err);\n    }\n  }\n\n  /**\n   * Asynchronously generates a bcrypt hash for the provided data.\n   *\n   * @param data - The data to be hashed, can be a string or a Buffer.\n   * @returns A Promise that resolves to the generated bcrypt hash.\n   * @throws InternalServerErrorException if an error occurs during the hashing process.\n   */\n  async hash(data: string | Buffer): Promise {\n    try {\n      const salt = await bcrypt.genSalt(this.saltRound);\n      return bcrypt.hashSync(data, salt);\n    } catch (err) {\n      this.logger.error("Failed to encrypt Password");\n      this.logger.error(err);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/ConfigurationModule.html": {
      url: "modules/ConfigurationModule.html",
      title: "module - ConfigurationModule",
      body: '\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { ConfigModule, ConfigService } from "@nestjs/config";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { selectDbConfig } from "./database/database.config";\nimport { ValidatedEnv } from "./env/validate-environment";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ envFilePath: ".env", validate: ValidatedEnv }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: selectDbConfig,\n    }),\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/CreateUserDto.html": {
      url: "classes/CreateUserDto.html",
      title: "class - CreateUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Class representing a data transfer object for creating a user.\nExtends the BaseUserDto class.\nContains a password field that must meet specific criteria.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: \'PassWord@@201\', description: \'Password must be at least 8 characters long and include uppercase, lowercase, number, and special character\'})@IsStrongPassword({minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1}, {message: \'Password must be at least 8 characters long and include uppercase, lowercase, number, and special character. Example: PassWord@@201\'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Email\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: \'John@example.com\'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: \'John Doe\'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: \'List of todos associated with the user\', example: undefined})@Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:26\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseUserDto } from "./base-user.dto";\nimport { IsStrongPassword } from "class-validator";\nimport { ApiProperty } from "@nestjs/swagger";\n\n/**\n * Class representing a data transfer object for creating a user.\n * Extends the BaseUserDto class.\n * Contains a password field that must meet specific criteria.\n */\nexport class CreateUserDto extends BaseUserDto {\n  @ApiProperty({\n    example: "PassWord@@201",\n    description:\n      "Password must be at least 8 characters long and include uppercase, lowercase, number, and special character",\n  })\n  @IsStrongPassword(\n    {\n      minLength: 8,\n      minLowercase: 1,\n      minUppercase: 1,\n      minNumbers: 1,\n      minSymbols: 1,\n    },\n    {\n      message:\n        "Password must be at least 8 characters long and include uppercase, lowercase, number, and special character. Example: PassWord@@201",\n    }\n  )\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/HashAlgorithmInterface.html": {
      url: "interfaces/HashAlgorithmInterface.html",
      title: "interface - HashAlgorithmInterface",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HashAlgorithmInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/hash/hash-algorithm.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        compare\n                                    \n                                \n                                \n                                    \n                                        hash\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string, hash: string, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash/hash-algorithm.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n            \n                \nhash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash/hash-algorithm.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface HashAlgorithmInterface {\n  hash(data: string | Buffer): Promise;\n  compare(data: string, hash: string, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/IamModule.html": {
      url: "modules/IamModule.html",
      title: "module - IamModule",
      body: '\n                   \n\n\n\n\n    Modules\n    IamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IamModule\n\n\n\ncluster_IamModule_providers\n\n\n\ncluster_IamModule_imports\n\n\n\n\nPasswordModule\n\nPasswordModule\n\n\n\nIamModule\n\nIamModule\n\nIamModule -->\n\nPasswordModule->IamModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nIamModule -->\n\nUsersModule->IamModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nIamModule -->\n\nAuthenticationService->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/iam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PasswordModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { PasswordModule } from "./password/password.module";\nimport { AuthenticationController } from "./authentication/authentication.controller";\nimport { AuthenticationService } from "./authentication/authentication.service";\nimport { UsersModule } from "../users/users.module";\n\n@Module({\n  imports: [PasswordModule, UsersModule],\n  controllers: [AuthenticationController],\n  providers: [AuthenticationService],\n})\nexport class IamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/IdDto.html": {
      url: "classes/IdDto.html",
      title: "class - IdDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/id-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/id-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsPositive } from "class-validator";\n\nexport class IdDto {\n  @IsInt()\n  @IsPositive()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/LoginUserDto.html": {
      url: "classes/LoginUserDto.html",
      title: "class - LoginUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CreateUserDto, ["todos", "name"])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from "./create-user.dto";\nimport { OmitType } from "@nestjs/swagger";\n\nexport class LoginUserDto extends OmitType(CreateUserDto, ["todos", "name"]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/PasswordModule.html": {
      url: "modules/PasswordModule.html",
      title: "module - PasswordModule",
      body: '\n                   \n\n\n\n\n    Modules\n    PasswordModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PasswordModule\n\n\n\ncluster_PasswordModule_providers\n\n\n\ncluster_PasswordModule_exports\n\n\n\n\nPasswordService \n\nPasswordService \n\n\n\nPasswordModule\n\nPasswordModule\n\nPasswordService  -->\n\nPasswordModule->PasswordService \n\n\n\n\n\nPasswordService\n\nPasswordService\n\nPasswordModule -->\n\nPasswordService->PasswordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/password/password.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PasswordService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { BcryptProvider } from "./hash/bcrypt.provider";\nimport { PasswordService } from "./password.service";\n\n@Module({\n  providers: [BcryptProvider, PasswordService],\n  exports: [PasswordService],\n})\nexport class PasswordModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/PasswordService.html": {
      url: "injectables/PasswordService.html",
      title: "injectable - PasswordService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashAlgorithm: BcryptProvider)\n                    \n                \n                        \n                            \n                                Defined in src/iam/password/password.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashAlgorithm\n                                                  \n                                                        \n                                                                        BcryptProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(providedPassword: string | Buffer, encryptedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/password.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Compares a provided password with an encrypted password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                providedPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to compare, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                        \n                                                encryptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe encrypted password to compare against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating if the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/password.service.ts:14\n                        \n                    \n\n\n            \n                \n                        Asynchronously hashes a password using the bcrypt algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A Promise that resolves to the hashed password.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from "@nestjs/common";\nimport { BcryptProvider } from "./hash/bcrypt.provider";\n\n@Injectable()\nexport class PasswordService {\n  constructor(private readonly hashAlgorithm: BcryptProvider) {}\n\n  /**\n   * Asynchronously hashes a password using the bcrypt algorithm.\n   *\n   * @param password - The password to be hashed, can be a string or a Buffer.\n   * @returns A Promise that resolves to the hashed password.\n   */\n  async hashPassword(password: string | Buffer) {\n    return await this.hashAlgorithm.hash(password);\n  }\n\n  /**\n   * Compares a provided password with an encrypted password.\n   *\n   * @param providedPassword - The password to compare, can be a string or a Buffer.\n   * @param encryptedPassword - The encrypted password to compare against.\n   * @returns A Promise that resolves to a boolean indicating if the passwords match.\n   */\n  async comparePassword(\n    providedPassword: string | Buffer,\n    encryptedPassword: string\n  ): Promise {\n    return await this.hashAlgorithm.compare(\n      providedPassword,\n      encryptedPassword\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/PublicUserDTO.html": {
      url: "classes/PublicUserDTO.html",
      title: "class - PublicUserDTO",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PublicUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/public-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BasePublicUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                todo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePublicUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePublicUserDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@IsPositive()@IsInt()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePublicUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePublicUserDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePublicUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePublicUserDto:19\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePublicUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePublicUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BasePublicUserDto } from "./base-public-user.dto";\n\nexport class PublicUserDTO extends BasePublicUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/SharedTransactionsService.html": {
      url: "injectables/SharedTransactionsService.html",
      title: "injectable - SharedTransactionsService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SharedTransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/shared-transactions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntity\n                            \n                            \n                                    Async\n                                findOneEntityByID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/transactions/shared-transactions.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntity\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntity(entityClass: EntityTarget, newEntity: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/transactions/shared-transactions.service.ts:33\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Asynchronously creates a transaction for adding a new user.\nExample :// Usage example in UserService\nasync createTransaction(newUser: CreateUserDto): Promise {\n    return this.transactionService.createEntity(User, newUser);\n  }\nOutput: User entity with the provided details\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entityClass\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEntity\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves with the created User entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneEntityByID\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneEntityByID(entityClass: EntityTarget, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/transactions/shared-transactions.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Asynchronously finds an entity by its ID within a transaction.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entityClass\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The class of the entity to search for (Todo or User).\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the entity to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A Promise that resolves with the found entity.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("TransactionService")\n                    \n                \n                    \n                        \n                                Defined in src/transactions/shared-transactions.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from "@nestjs/common";\nimport { DataSource, DeepPartial, EntityTarget } from "typeorm";\n\nimport { Todo } from "../todo/entity/todo-entity";\nimport { User } from "../users/entity/user-entity";\n\n@Injectable()\nexport class SharedTransactionsService {\n  private readonly logger = new Logger("TransactionService");\n\n  constructor(private readonly dataSource: DataSource) {}\n  /**\n   * Asynchronously creates a transaction for adding a new user.\n   *\n   * @returns A Promise that resolves with the created User entity.\n   * @throws ConflictException if a user with the same email or phone number already exists.\n   * @throws InternalServerErrorException if there is an issue creating the user.\n   *\n   * @example\n   * // Usage example in UserService\n   * async createTransaction(newUser: CreateUserDto): Promise {\n   *     return this.transactionService.createEntity(User, newUser);\n   *   }\n   * Output: User entity with the provided details\n   * @param entityClass\n   * @param newEntity\n   */\n  async createEntity(\n    entityClass: EntityTarget,\n    newEntity: DeepPartial\n  ): Promise {\n    return await this.dataSource.transaction(\n      async (transactionalEntityManager) => {\n        try {\n          // Create the entity using the provided DTO and class\n          const entity = transactionalEntityManager.create(\n            entityClass,\n            newEntity\n          );\n\n          // Save the entity inside the transaction\n          return await transactionalEntityManager.save(entity);\n        } catch (error) {\n          // Handle unique constraint violation errors (Postgres error code 23505)\n          if (error.code === "23505") {\n            this.logger.error(\n              `Conflict creating new record - Transaction Failed due to: ${error.detail}`\n            );\n            throw new ConflictException(\n              "A conflict occurred - email already exists."\n            );\n          }\n          throw error;\n        }\n      }\n    );\n  }\n\n  /**\n   * Asynchronously finds an entity by its ID within a transaction.\n   *\n   * @param entityClass The class of the entity to search for (Todo or User).\n   * @param id The ID of the entity to find.\n   * @returns A Promise that resolves with the found entity.\n   * @throws NotFoundException if the entity with the provided ID is not found.\n   */\n  async findOneEntityByID(entityClass: EntityTarget, id: number) {\n    return await this.dataSource.transaction(\n      async (transactionalEntityManager) => {\n        try {\n          return await transactionalEntityManager.findOneBy(entityClass, {\n            id: id,\n          });\n        } catch (error) {\n          if (entityClass === Todo) {\n            this.logger.log(`No Todo with id:${id} found`);\n          } else if (entityClass === User) {\n            this.logger.log(`No User with id:${id} found`);\n          }\n          const message = `${entityClass === Todo ? "Todo" : "User"} with id: ${id} not found`;\n          throw new NotFoundException(message);\n        }\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "entities/Todo.html": {
      url: "entities/Todo.html",
      title: "entity - Todo",
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  Todo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/entity/todo-entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(Todo.name)\n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.todos)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entity/todo-entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from "typeorm";\nimport { Logger } from "@nestjs/common";\nimport { User } from "../../users/entity/user-entity";\n\n@Entity("todos")\nexport class Todo {\n  private readonly logger = new Logger(Todo.name);\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  title: string;\n  @Column()\n  description: string;\n  @CreateDateColumn()\n  createdAt: Date;\n  @UpdateDateColumn()\n  updatedAt: Date;\n  @ManyToMany(() => User, (user) => user.todos)\n  user: User;\n\n  @AfterInsert()\n  afterInsert() {\n    this.logger.log(`New todo Inserted : ID :${this.id}`);\n  }\n  @AfterUpdate()\n  afterUpdate() {\n    this.logger.log(`Updated todo : ID :${this.id}`);\n  }\n  @AfterRemove()\n  afterRemove() {\n    this.logger.log(`todo : ID :${this.id} successfully removed`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/TodoModule.html": {
      url: "modules/TodoModule.html",
      title: "module - TodoModule",
      body: '\n                   \n\n\n\n\n    Modules\n    TodoModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/todo/todo.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\n\n@Module({})\nexport class TodoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/TodoTransactionService.html": {
      url: "injectables/TodoTransactionService.html",
      title: "injectable - TodoTransactionService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoTransactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/todo-transaction.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/transactions/todo-transaction.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { DataSource } from "typeorm";\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class TodoTransactionService {\n  constructor(private readonly dataSource: DataSource) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/TransactionsModule.html": {
      url: "modules/TransactionsModule.html",
      title: "module - TransactionsModule",
      body: '\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nSharedTransactionsService \n\nSharedTransactionsService \n\n\n\nUserTransactionService \n\nUserTransactionService \n\n\n\nTransactionsModule\n\nTransactionsModule\n\nSharedTransactionsService  -->\n\nTransactionsModule->SharedTransactionsService \n\n\n\nUserTransactionService  -->\n\nTransactionsModule->UserTransactionService \n\n\n\n\n\nSharedTransactionsService\n\nSharedTransactionsService\n\nTransactionsModule -->\n\nSharedTransactionsService->TransactionsModule\n\n\n\n\n\nUserTransactionService\n\nUserTransactionService\n\nTransactionsModule -->\n\nUserTransactionService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SharedTransactionsService\n                        \n                        \n                            UserTransactionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SharedTransactionsService\n                        \n                        \n                            UserTransactionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { SharedTransactionsService } from "./shared-transactions.service";\nimport { UserTransactionService } from "./user-transaction.service";\n\n@Module({\n  providers: [SharedTransactionsService, UserTransactionService],\n  exports: [SharedTransactionsService, UserTransactionService],\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "entities/User.html": {
      url: "entities/User.html",
      title: "entity - User",
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user-entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                logger\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Email\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("User Table")\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.user, {onDelete: \'CASCADE\'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from "typeorm";\nimport { Todo } from "../../todo/entity/todo-entity";\nimport { Logger } from "@nestjs/common";\nimport { Email } from "../../common/types/email";\n\n@Entity("users")\nexport class User {\n  private readonly logger? = new Logger("User Table");\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n  @Column({ unique: true })\n  email: Email;\n  @Column()\n  password: string;\n  @OneToMany(() => Todo, (todo) => todo.user, { onDelete: "CASCADE" })\n  todos: Todo[];\n\n  @AfterInsert()\n  afterInsert() {\n    this.logger.log(`Successfully created new User ${this.name} 🖐️`);\n  }\n  @AfterUpdate()\n  afterUpdate() {\n    this.logger.log(`Successfully Updated 📢 User ${this.name}`);\n    this.logger.log(`Total Todo list number ${this.todos.length}`);\n  }\n  @AfterRemove()\n  afterRemove() {\n    this.logger.log(`Successfully Removed 📢 User with ID: ${this.id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/UserService.html": {
      url: "injectables/UserService.html",
      title: "injectable - UserService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/managment/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransaction\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sharedTransactions: SharedTransactionsService, userTransactionService: UserTransactionService)\n                    \n                \n                        \n                            \n                                Defined in src/users/managment/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sharedTransactions\n                                                  \n                                                        \n                                                                        SharedTransactionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userTransactionService\n                                                  \n                                                        \n                                                                        UserTransactionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransaction(newUser: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/managment/user.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Asynchronously creates a transaction for adding a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object representing the new user to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A Promise that resolves with the created User entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: Email)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/managment/user.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Asynchronously finds a user by their email address.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            Email\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email address of the user to search for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A Promise that resolves with the found User entity or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/managment/user.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Asynchronously finds a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to search for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A Promise that resolves with the found User entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from "@nestjs/common";\nimport { CreateUserDto } from "../dto/create-user.dto";\nimport { User } from "../entity/user-entity";\nimport { SharedTransactionsService } from "../../transactions/shared-transactions.service";\nimport { UserTransactionService } from "../../transactions/user-transaction.service";\nimport { Email } from "../../common/types/email";\nimport { validateEmail } from "../../common/util/email.util";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private readonly sharedTransactions: SharedTransactionsService,\n    private readonly userTransactionService: UserTransactionService\n  ) {}\n\n  /**\n   * Asynchronously creates a transaction for adding a new user.\n   *\n   * @param newUser - The data transfer object representing the new user to be created.\n   * @returns A Promise that resolves with the created User entity.\n   * @throws ConflictException if a user with the same email or phone number already exists.\n   * @throws InternalServerErrorException if there is an issue creating the user.\n   */\n  async createTransaction(newUser: CreateUserDto): Promise {\n    return this.sharedTransactions.createEntity(User, newUser);\n  }\n\n  /**\n   * Asynchronously finds a user by their ID.\n   *\n   * @param id - The ID of the user to search for.\n   * @returns A Promise that resolves with the found User entity.\n   */\n  async findUserById(id: number): Promise {\n    return (await this.sharedTransactions.findOneEntityByID(User, id)) as User;\n  }\n\n  /**\n   * Asynchronously finds a user by their email address.\n   *\n   * @param email - The email address of the user to search for.\n   * @returns A Promise that resolves with the found User entity or null if not found.\n   * @throws BadRequestException if the email address format is invalid.\n   * @throws InternalServerErrorException if there is an issue during the search process.\n   */\n  async findUserByEmail(email: Email): Promise {\n    try {\n      const validatedEmail: Email = validateEmail(email);\n      return await this.userTransactionService.findOneUserByEmail(\n        User,\n        validatedEmail\n      );\n    } catch (error) {\n      if (error instanceof BadRequestException) throw error;\n      else throw new InternalServerErrorException(`Cause : ${error.stack}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/UserTransactionService.html": {
      url: "injectables/UserTransactionService.html",
      title: "injectable - UserTransactionService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserTransactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/user-transaction.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOneUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/transactions/user-transaction.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUserByEmail(entityClass: EntityTarget, email: Email)\n                \n            \n\n\n                    \n                        \n                            Defined in src/transactions/user-transaction.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entityClass\n                                            \n                                                            EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            Email\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("UserTransactionService")\n                    \n                \n                    \n                        \n                                Defined in src/transactions/user-transaction.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { DataSource, EntityTarget } from "typeorm";\nimport { User } from "../users/entity/user-entity";\nimport {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from "@nestjs/common";\nimport { Email } from "../common/types/email";\n\n@Injectable()\nexport class UserTransactionService {\n  private readonly logger = new Logger("UserTransactionService");\n  constructor(private readonly dataSource: DataSource) {}\n\n  async findOneUserByEmail(\n    entityClass: EntityTarget,\n    email: Email\n  ): Promise {\n    return await this.dataSource.transaction(\n      async (transactionalEntityManager) => {\n        try {\n          // Use findOneOrFail to retrieve the entity by ID\n          return await transactionalEntityManager.findOneBy(entityClass, {\n            email: email, // Corrected typo\n          });\n        } catch (error) {\n          console.log("Caught error:", error); // Check if the mocked error is being caught\n          this.logger.log(\n            `Issue when trying to retrieve user with email :${email} `\n          );\n          this.logger.error(`cause : ${error.stack}`);\n          throw new InternalServerErrorException();\n        }\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/UsersModule.html": {
      url: "modules/UsersModule.html",
      title: "module - UsersModule",
      body: '\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nTransactionsModule->UsersModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { UserService } from "./managment/user.service";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { User } from "./entity/user-entity";\nimport { TransactionsModule } from "../transactions/transactions.module";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), TransactionsModule],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/ValidateEnvironment.html": {
      url: "classes/ValidateEnvironment.html",
      title: "class - ValidateEnvironment",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidateEnvironment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/env/validate-environment.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for validating environment variables related to AWS RDS, Vercel database, Swagger, and application settings.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                DB_ENGINE\n                            \n                            \n                                    \n                                    \n                                DB_HOST\n                            \n                            \n                                    \n                                    \n                                DB_NAME\n                            \n                            \n                                    \n                                    \n                                DB_PASSWORD\n                            \n                            \n                                    \n                                    \n                                DB_PORT\n                            \n                            \n                                    \n                                    \n                                DB_USER\n                            \n                            \n                                    \n                                    \n                                POSTGRES_DATABASE\n                            \n                            \n                                    \n                                    \n                                POSTGRES_PASSWORD\n                            \n                            \n                                    \n                                    \n                                POSTGRES_URL\n                            \n                            \n                                    \n                                    \n                                POSTGRES_USER\n                            \n                            \n                                    \n                                    \n                                SALT_ROUND\n                            \n                            \n                                    \n                                    \n                                SWAGGER_ADD_SVR\n                            \n                            \n                                    \n                                    \n                                SWAGGER_DES\n                            \n                            \n                                    \n                                    \n                                SWAGGER_LICENCE\n                            \n                            \n                                    \n                                    \n                                SWAGGER_PREFIX\n                            \n                            \n                                    \n                                    \n                                SWAGGER_VER\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DB_ENGINE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DB_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DB_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DB_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DB_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_DATABASE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        POSTGRES_USER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SALT_ROUND\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SWAGGER_ADD_SVR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SWAGGER_DES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SWAGGER_LICENCE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SWAGGER_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SWAGGER_VER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/env/validate-environment.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsInt,\n  IsNotEmpty,\n  IsPositive,\n  IsString,\n  validateSync,\n} from "class-validator";\nimport { plainToInstance } from "class-transformer";\nimport { InternalServerErrorException, Logger } from "@nestjs/common";\n\n/**\n * Class for validating environment variables related to AWS RDS, Vercel database, Swagger, and application settings.\n */\nexport class ValidateEnvironment {\n  // AWS RDS\n  @IsNotEmpty()\n  @IsString()\n  DB_HOST: string;\n  @IsInt()\n  @IsPositive()\n  DB_PORT: number;\n  @IsNotEmpty()\n  @IsString()\n  DB_USER: string;\n  @IsNotEmpty()\n  @IsString()\n  DB_PASSWORD: string;\n  @IsNotEmpty()\n  @IsString()\n  DB_NAME: string;\n  @IsNotEmpty()\n  @IsString()\n  DB_ENGINE: string;\n\n  // Vercel db prod\n  @IsNotEmpty()\n  @IsString()\n  POSTGRES_URL: string;\n  @IsNotEmpty()\n  @IsString()\n  POSTGRES_USER: string;\n  @IsNotEmpty()\n  @IsString()\n  POSTGRES_PASSWORD: string;\n  @IsNotEmpty()\n  @IsString()\n  POSTGRES_DATABASE: string;\n\n  // SWAGGER\n  @IsNotEmpty()\n  @IsString()\n  SWAGGER_DES: string;\n  @IsNotEmpty()\n  @IsString()\n  SWAGGER_VER: string;\n  @IsNotEmpty()\n  @IsString()\n  SWAGGER_ADD_SVR: string;\n  @IsNotEmpty()\n  @IsString()\n  SWAGGER_LICENCE: string;\n  @IsNotEmpty()\n  @IsString()\n  SWAGGER_PREFIX: string;\n\n  // APPLICATION\n  @IsInt()\n  @IsPositive()\n  APP_PORT: number;\n\n  // BcryptProvider\n  @IsInt()\n  @IsPositive()\n  SALT_ROUND: number;\n}\n\n/**\n * Validates the provided configuration object based on the ValidateEnvironment class rules.\n * Logs any validation errors and throws an InternalServerErrorException if errors are found.\n * Returns the validated configuration object.\n *\n * @param config - The configuration object to be validated.\n * @returns The validated configuration object.\n */\nexport function ValidatedEnv(config: Record) {\n  const logger = new Logger("Validated Env");\n  const validated = plainToInstance(ValidateEnvironment, config, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validated, {\n    skipMissingProperties: false,\n  });\n\n  if (errors.length > 0) {\n    logger.log(`${errors.length} error(s) Failed validation`);\n    logger.log(`${JSON.stringify(errors)}`);\n    throw new InternalServerErrorException();\n  }\n  logger.log("😎 Environment Validation successfully validated 🍉");\n\n  return validated;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "coverage.html": {
      url: "coverage.html",
      title: "coverage - coverage",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/id-dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/util/email.util.ts\n            \n            function\n            validateEmail\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/database/database.config.ts\n            \n            variable\n            getDockerDbConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/database/database.config.ts\n            \n            variable\n            getRDSConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/database/database.config.ts\n            \n            variable\n            getVercelDbConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/database/database.config.ts\n            \n            variable\n            selectDbConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/env/validate-environment.ts\n            \n            class\n            ValidateEnvironment\n            \n                5 %\n                (1/18)\n            \n        \n        \n            \n                \n                src/configuration/env/validate-environment.ts\n            \n            function\n            ValidatedEnv\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/swagger/swagger.doc.ts\n            \n            variable\n            swaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/iam/password/hash/bcrypt.provider.ts\n            \n            class\n            BcryptProvider\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/iam/password/hash/hash-algorithm.interface.ts\n            \n            interface\n            HashAlgorithmInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/password/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todo/entity/todo-entity.ts\n            \n            entity\n            Todo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transactions/shared-transactions.service.ts\n            \n            injectable\n            SharedTransactionsService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/transactions/todo-transaction.service.ts\n            \n            injectable\n            TodoTransactionService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/transactions/user-transaction.service.ts\n            \n            injectable\n            UserTransactionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/base-public-user.dto.ts\n            \n            class\n            BasePublicUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/base-user.dto.ts\n            \n            class\n            BaseUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/public-user.dto.ts\n            \n            class\n            PublicUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/entity/user-entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/managment/user.service.ts\n            \n            injectable\n            UserService\n            \n                60 %\n                (3/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "dependencies.html": {
      url: "dependencies.html",
      title: "package-dependencies - dependencies",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.5\n        \n            fork-ts-checker-webpack-plugin : ^9.0.2\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            run-script-webpack-plugin : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            supabase : ^1.200.3\n        \n            swagger-ui-express : ^5.0.1\n        \n            terser-webpack-plugin : ^5.3.10\n        \n            typeorm : ^0.3.20\n        \n            vercel : ^37.6.1\n        \n            webpack : ^5.95.0\n        \n            webpack-cli : ^5.1.4\n        \n            webpack-node-externals : ^3.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/functions.html": {
      url: "miscellaneous/functions.html",
      title: "miscellaneous-functions - functions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            ValidatedEnv   (src/.../validate-environment.ts)\n                        \n                        \n                            validateEmail   (src/.../email.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/configuration/env/validate-environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidatedEnv\n                        \n                    \n                \n            \n            \n                \nValidatedEnv(config: Record)\n                \n            \n\n\n\n\n            \n                \n                        Validates the provided configuration object based on the ValidateEnvironment class rules.\nLogs any validation errors and throws an InternalServerErrorException if errors are found.\nReturns the validated configuration object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration object to be validated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/util/email.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateEmail\n                        \n                    \n                \n            \n            \n                \nvalidateEmail(email: string)\n                \n            \n\n\n\n\n            \n                \n                        Validates the format of an email address.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The email address to validate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Email\n\n                        \n                            \n                                The validated email address with the \'brand\' symbol.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "index.html": {
      url: "index.html",
      title: "getting-started - index",
      body: '\n                   \n\n\n  \n\n\n Project URL\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription Todo List API\n\n\nIn this project we are required to develop a RESTful API to allow users to manage their to-do list. \nThe backend projects will require you to implement:\n\nImplement user authentication as well.\nImplement filtering and sorting for the to-do list\nImplement unit tests for the API\nImplement rate limiting and throttling for the API\nImplement refresh token mechanism for the authentication\n\nGoals\nThe skills used from this project include:\n\nUser authentication\nSchema design and Databases\nRESTful API design\nCRUD operations\nError handling\nSecurity\n\nRequirements\nWe are required to develop a RESTful API with following endpoints\n\nUser registration to create a new user\nLogin endpoint to authenticate the user and generate a token\nCRUD operations for managing the to-do list\nImplement user authentication to allow only authorized users to access the to-do list\nImplement error handling and security measures\nUse a database to store the user and to-do list data (you can use any database of your choice)\nImplement proper data validation\nImplement pagination and filtering for the to-do list\n\nSolution overview\n\n\n\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Jordach Makaya\nLinkedin - @jordachmakaya\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "license.html": {
      url: "license.html",
      title: "getting-started - license",
      body: '\n                   \n\nMIT License\nCopyright (c) 2024 Jordach Makaya\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules.html": {
      url: "modules.html",
      title: "modules - modules",
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PasswordModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodoModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "overview.html": {
      url: "overview.html",
      title: "overview - overview",
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\ncluster_IamModule_providers\n\n\n\ncluster_PasswordModule\n\n\n\ncluster_PasswordModule_exports\n\n\n\ncluster_PasswordModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAppModule -->\n\nTodoModule->AppModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nTransactionsModule->UsersModule\n\n\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nSharedTransactionsService \n\nSharedTransactionsService \n\nSharedTransactionsService  -->\n\nTransactionsModule->SharedTransactionsService \n\n\n\n\n\nUserTransactionService \n\nUserTransactionService \n\nUserTransactionService  -->\n\nTransactionsModule->UserTransactionService \n\n\n\nIamModule -->\n\nUsersModule->IamModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nPasswordModule\n\nPasswordModule\n\nIamModule -->\n\nPasswordModule->IamModule\n\n\n\n\n\nPasswordService \n\nPasswordService \n\nPasswordService  -->\n\nPasswordModule->PasswordService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nIamModule -->\n\nAuthenticationService->IamModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nPasswordModule -->\n\nPasswordService->PasswordModule\n\n\n\n\n\nSharedTransactionsService\n\nSharedTransactionsService\n\nTransactionsModule -->\n\nSharedTransactionsService->TransactionsModule\n\n\n\n\n\nUserTransactionService\n\nUserTransactionService\n\nTransactionsModule -->\n\nUserTransactionService->TransactionsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "properties.html": {
      url: "properties.html",
      title: "package-properties - properties",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description :  Develop a RESTful API + Auth to allow users to manage their to-do list.\n        \n            License : MIT\n        \n            Author : Jordach Makaya\n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/typealiases.html": {
      url: "miscellaneous/typealiases.html",
      title: "miscellaneous-typealiases - typealiases",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Email   (src/.../email.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/types/email.ts\n    \n    \n        \n            \n                \n                    \n                    Email\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/variables.html": {
      url: "miscellaneous/variables.html",
      title: "miscellaneous-variables - variables",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getDockerDbConfig   (src/.../database.config.ts)\n                        \n                        \n                            getRDSConfig   (src/.../database.config.ts)\n                        \n                        \n                            getVercelDbConfig   (src/.../database.config.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            selectDbConfig   (src/.../database.config.ts)\n                        \n                        \n                            swaggerDoc   (src/.../swagger.doc.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configuration/database/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDockerDbConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  configService: ConfigService\n): TypeOrmModuleOptions => ({\n  type: "postgres",\n  host: configService.getOrThrow("DATASOURCE_HOST"),\n  port: configService.getOrThrow("DATASOURCE_PORT"),\n  database: configService.getOrThrow("DATASOURCE_DATABASE"),\n  username: configService.getOrThrow("DATASOURCE_USERNAME"),\n  password: configService.getOrThrow("DATASOURCE_PASSWORD"),\n  entities: [User, Todo],\n  synchronize: true,\n})\n                    \n                \n\n            \n                \n                    Returns the TypeORM module options for connecting to a PostgreSQL database running in a Docker container.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRDSConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  configService: ConfigService\n): TypeOrmModuleOptions => ({\n  type: "postgres",\n  host: configService.getOrThrow("DB_HOST"),\n  port: configService.getOrThrow("DB_PORT"),\n  database: configService.getOrThrow("DB_NAME"),\n  username: configService.getOrThrow("DB_USER"),\n  password: configService.getOrThrow("DB_PASSWORD"),\n  entities: [User, Todo],\n  ssl: {\n    rejectUnauthorized: false,\n  },\n})\n                    \n                \n\n            \n                \n                    Generates TypeORM configuration object for connecting to an AWS RDS PostgreSQL database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVercelDbConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  configService: ConfigService\n): TypeOrmModuleOptions => ({\n  type: "postgres",\n  url: configService.getOrThrow("POSTGRES_URL"),\n  ssl: {\n    rejectUnauthorized: true, // Ensure this is true when using a valid CA\n    // ca: fs.readFileSync(caCertPath).toString(), // Adjust the path accordingly\n  },\n  username: configService.getOrThrow("POSTGRES_USER"),\n  password: configService.getOrThrow("POSTGRES_PASSWORD"),\n  database: configService.getOrThrow("POSTGRES_DATABASE"),\n  host: configService.getOrThrow("POSTGRES_HOST"),\n})\n                    \n                \n\n            \n                \n                    Retrieves the configuration options for the Vercel database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectDbConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (configService: ConfigService) => {\n  const logger = new Logger("Database Config");\n  if (configService.get("DB_ENGINE") === "docker") {\n    logger.log("You are working on LOCAL DOCKER 🍉 db config");\n    return getDockerDbConfig(configService);\n  } else if (configService.get("DB_ENGINE") === "vercel") {\n    logger.log("You are working on VERCEL 🍉 db config");\n    return getVercelDbConfig(configService);\n  } else if (configService.get("DB_ENGINE") === "postgres") {\n    logger.log("You are working on AWS RDS 🍉 db config");\n    return getRDSConfig(configService);\n  }\n  logger.warn("Please check the DB_ENGINE specified in the configuration");\n  throw new InternalServerErrorException(\n    "Invalid DB_ENGINE specified in configuration"\n  );\n}\n                    \n                \n\n            \n                \n                    Selects the appropriate TypeORM configuration based on the specified database engine, host, or port.\n\n                \n            \n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/configuration/swagger/swagger.doc.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerDoc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n  .setTitle(process.env.SWAGGER_DES || "API Documentation")\n  .setDescription(process.env.SWAGGER_DES || "API Documentation")\n  .setVersion(process.env.SWAGGER_VER || "1.0")\n  .addServer(process.env.SWAGGER_ADD_SVR || "http://localhost:3000")\n  .setLicense("License", process.env.SWAGGER_LICENCE || "MIT")\n  .build()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
